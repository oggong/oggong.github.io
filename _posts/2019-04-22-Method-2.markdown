---
layout: post
title:  "0422-1-[자바]-Method-2"
subtitle:   "0422-Method2"
categories: devlog
tags: Java

---
## Method (2)

<hr style="height: 1px; background: skyblue; "/>

#### overloading

~~~

package e_method;

/*
	overloading
		:동일한 이름의 메소드들
		- 인자의 자료형과 갯수 달라야 함

		[주의 할 점]	add(1,2)
			int add (int a, int b){}
			double add (int x, int b){} ------ compile 에러
			리턴 형만 다르면 컴파일 오류 발생
*/
public class Ex05_overloading {

//	static void addIntDouble(int c, double d) {
//		System.out.println(c + d);
//	}  ------------------------------------여기 입력해도 사용 가능 !!!

	public static void main(String[] args) {
		int a = 5, b = 7;
//		addInt(a, b); // 메소드의 첫글자는 소문자 // 그러다가 중간에 대문자로 해주는것을 권장 //카멜 표기법 == 낙타표기법
		add(a, b);
		int c = 3;
		double d = 3.6;
//		addIntDouble(c, d);
		add(c, d);
	}

//	인자와 자료형 비교
	static void add(int a, int b) {
		System.out.println(a + b);
	}

// 메소드명은 동일해도 되지만 인자의 자료형은 같아야 한다. // 다르려면 인자의 자료형과 갯수가 달라야 함!
	static void add(int c, double d) {
		System.out.println(c + d);
	}

}


~~~

<hr style="height: 1px; background: skyblue; "/>

#### WronOverLoding

~~~

package e_method;

public class Ex06_WrongOverLoading {

	public static void main(String[] args) {
		String msg = "안녕";
		output1(msg);
//		String result = output(msg);
		String result = output2(msg);
	}
	static void output1(String msg) {
		System.out.println(msg);
	}
//	static String output(String msg) {
//		String result = "맞점";
//		return result;
//	}			이것의 문제를 해결 하기 위해선 메소드 이름 바꿔 줘야 합니다.
	static String output2(String msg) {
		String result = "맞점";
		return result;
	}
}



~~~

<hr style="height: 1px; background: skyblue; "/>


#### CallByValue

~~~

package e_method;

public class Ex07_CallByValue {

	public static void main(String[] args) {
		int a = 10, b = 20;
		add(a, b);
		System.out.println("2.A=" + a + ",B=" + b);

	} //기본형 데이터의 경우 메서드에서 해당 데이터를

		// 단, 기본형에서도 메서드를 통해 값 변경 하고 싶은 경우에 return사용

	static void add(int a, int b) {
		a += b;
		System.out.println("1.A=" + a + ",B=" + b); //1.
	}
}


~~~

<hr style="height: 1px; background: skyblue; "/>

#### CallByReference

~~~

package e_method;

public class Ex08_CallByReference {

	public static void main(String[] args) {
		StringBuffer a = new StringBuffer("행복하자");
		StringBuffer b = new StringBuffer("짝꿍님");

		add(a, b);

		System.out.println("2.A= " + a + "B=" + b);

	} // String은 원래 call by reference 가 맞다.
		// string의 특징 때문에 call by reference 와 다른 결과가 나온다.
		// call by value 와 같은 결과

	static void add(StringBuffer a, StringBuffer b) {
		a.append(b);
		System.out.println("1.A= " + a + "B=" + b);
	}

}


~~~

<hr style="height: 1px; background: skyblue; "/>


#### main

~~~

package e_method;

/*
	메소드명 : main
	인자: String[] args
	리턴형: void

*/
/*
	Test.java --> Test.class
		(1) 컴파일 : javac Test.java

		(2) 실행 : java Test 192.168.0.1 <scott tiger>

		--일반적으로 다른컴퓨터로 접속하기 위해 사용
*/
public class Ex09_Main {

	public static void main(String[] args) {
//			String ipadd = "192.168.0.2";
//			String id = "tom";
//			String pw = "bear";


		for (int i = 0; i < args.length; i++) {
			System.out.println(args[i]);
		}

	}

}


~~~

<hr style="height: 1px; background: skyblue; "/>


#### 연습문제

~~~

package e_method;

import java.util.Scanner;

//[필수]   multiple 메소드 만들기

//
//
//- 2개의 int 인자인 경우는 곱셈계산 한 결과를 출력
//- 1개의 int 인자와 1개의 char 인자인 경우는 int 인자 수 만큼 char 인자 문자를 출력
//- 2개의 int 인자와 1개의 char 인자인 경우는 char 인자 문자를 n * m 형식의 행과 열로 출력

public class example3 {

	static int a, b;
	static int gop;

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.println("숫자를 입력하세요.");
		a = sc.nextInt();
		b = sc.nextInt();

		gop();

	}

	static void gop() {

		gop = a * b;

		System.out.println(gop);
	}
}


~~~

<hr style="height: 1px; background: skyblue; "/>

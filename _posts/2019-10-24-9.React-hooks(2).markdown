---
layout: post
title:  "1024-[React]-9.React hooks(2)"
subtitle:   "1024-9.React hooks(2)"
categories: devlog
tags: react
---

## React hooks (2)

<hr style="height: 1px; background: skyblue; "/>

#### useReducer

useReducer는 useState보다 더 다양한 컴포넌트 상황에 따라 다양한 상태를 다른 값으로 <br/>
업데이트 해주고 싶을 때 사용하는 hook

- 리듀서는 현재 상태, 그리고 업데이트를 위해 필요한 정보를 담은 액션 값을 전달받아 <br/>
    새로운 상태를 반환하는 함수
- 리듀서 함수에서 새로운 상태를 만들때는 반드시 불변성을 지켜주어야 한다.

~~~

function reducer(state, action) {
    return {...}; // 불변성을 지키면서 업데이트한 새로운 상태를 반환
}

~~~


- 액션값

~~~

{
    type: 'INCREMENT',
    // 다른 값들이 필요하다면 추가로 들어감
}

~~~

#### 카운터 구현하기

- Counter.js

~~~

import React, { useReducer } from 'react';

function reducer(state, action) {

    //action.type에 따라 다른 작업 수행
    switch (action.type) {
        case 'INCREMENT':
            return { value: state.value + 1 };
        case 'DECREMENT':
            return { value: state.value - 1 };
        default:
            // 아무것도 해당되지 않을 때 기존 상태 변환
            return state;
    }

}

const Counter = () => {
    const [state, dispatch] = useReducer(reducer, { value: 0 });


    return (
        <div>
            <p>
                현재 카운터 값은 <b>{state.value}</b>입니다.
            </p>
            <button onClick={() => dispatch({ type: 'INCREMENT' })}>+1</button>
            <button onClick={() => dispatch({ type: 'DECREMENT' })}>-1</button>
        </div>
    );
};

export default Counter;

~~~

> - useReducer의 첫 번째 파라미터에는 리듀서 함수,
> - 두 번째 파라미터에는 해당 리듀서의 기본값 넣어준다.
> - 이 Hook을 사용하면 state 값과 dispatch 함수를 받는다
>   - state는 현재 가리키고 있는 상태, dispatch는 액션을 발생시키는 함수
>   - dispatch(action) 과 같은 형태로, 함수 안에 파라미터로 액션 값을 넣어 주면 <br/>
>   리듀서 함수가 호출되는 구조
> - useReducer는 컴포넌트 업데이트 로직을 컴포넌트 바깥으로 빼낼수 있다는 장점 


#### 인풋 상태 관리하기

- useReducer를 사용하여 Info 컴포넌트에서 인풋 상태를 관리

- 기존에는 인풋이 여러 개 여서 useState를 여러 번 사용
- useReducer를 사용하면 기존에 클래스형 컴포넌트에서 input 태그에 <br/>
    name 값을 할당하고 e.target.name을 참조하여 setState를 해준것과 <br/>
    유사한 방식으로 작업을 처리할 수 있다.

- Info.js

~~~

import React, { useReducer } from 'react';

function reducer(state, action) {
    return {
        ...state,
        [action.name]: action.value
    };
}

const Info = () => {

    const [state, dispatch] = useReducer(reducer, {
        name: '',
        nickname: ''
    });

    const { name, nickname } = state;

    const onChange = e => {
        dispatch(e.target);
    };

    return (
        <div>
            <div>
                <input name="name" value={name} onChange={onChange} />
                <input name="nickname" value={nickname} onChange={onChange} />
            </div>
            <div>
                <div>
                    <b>이름:</b> {name}
                </div>
                <div>
                    <b>닉네임:</b> {nickname}
                </div>
            </div>
        </div>
    );
};

export default Info;

~~~

- useReducer에서의 액션은 그 어떤 값도 사용 가능
- 이벤트 객체가 지니고 있는 e.target 값 자체를 액션 값으로 사용
- 인풋을 관리하면 아무리 인풋 개수 많아져도 코드를 짧고 깔끔하게 유지 가능


<hr style="height: 1px; background: skyblue; "/>

#### useMemo

- useMemo를 사용하면 함수형 컴포넌트 내부에서 발생하는 연산을 최적화 할수 있다.
- 먼저 리스트에 숫자를 추가하면 추가된 숫자들의 평균을 보여주는 함수형 컴포넌트 작성

- Average.js

~~~

import React, {useState} from 'react';


const getAverage = numbers => {
    console.log('평균값 계산 중..');
    if (numbers.length === 0) return 0;
    const sum = numbers.reduce((a,b) => a+b);
    return sum / numbers.length;
};

const Average = () => {
    const [list, setList] = useState([]);
    const [number, setNumber] = useState('');

    const onChange = e => {
        setNumber(e.target.value);
    };

    const onInsert = e => {
        const nextList = list.concat(parseInt(number));
        setList(nextList);
        setNumber('');
    };

    return (
        <div>
            <input value={number} onChange={onChange}/>
            <button onClick={onInsert}>등록</button>
            <ul>
                {list.map((value, index) => (
                    <li key={index}>{value}</li>
                ))}
            </ul>
            <div>
                <b>평균값:</b> {getAverage(list)}
            </div>
        </div>
    );
};

export default Average;

~~~

- 숫자를 등록할 때 뿐만 아니라 인풋 내용이 수정될때도 getAverage 함수 호출 확인 가능
- 인풋 내용이 바뀔때는 평균 값을 다시 계산할 필요가 없다. 이렇게 렌더링 하면 계산 낭비

- useMemo Hook을 사용하면 이러한 작업을 최적화 할수 있다.
- 렌더링하는 과정에서 특정 값이 바뀌었을 때만 연산을 실행, 원하는 값이 <br/>
    바뀌지 않았다면 이전에 연산했던 결과를 다시 사용하는 방식

- Average.js

~~~

import React, { useState, useMemo } from 'react';


const getAverage = numbers => {
    console.log('평균값 계산 중..');
    if (numbers.length === 0) return 0;
    const sum = numbers.reduce((a, b) => a + b);
    return sum / numbers.length;
};

const Average = () => {
    const [list, setList] = useState([]);
    const [number, setNumber] = useState('');

    const onChange = e => {
        setNumber(e.target.value);
    };

    const onInsert = e => {
        const nextList = list.concat(parseInt(number));
        setList(nextList);
        setNumber('');
    };

    const avg = useMemo(() => getAverage(list), [list]);

    return (
        <div>
            <input value={number} onChange={onChange} />
            <button onClick={onInsert}>등록</button>
            <ul>
                {list.map((value, index) => (
                    <li key={index}>{value}</li>
                ))}
            </ul>
            <div>
                <b>평균값:</b> {avg}
            </div>
        </div>
    );
};

export default Average;

~~~

<hr style="height: 1px; background: skyblue; "/>

#### useCallback

- useMemo와 상당히 비슷
- 주로 렌더링 성능을 최적화해야 하는 상황에서 사용
- 이 Hook을 사용하면 이벤트 헨들러 함수를 필요할 때만 생성할수 있다.

- Average 컴포넌트 onChange, onInsert 라는 함수를 선언
- 컴포넌트가 리렌더링 될때마다 이 함수들이 새로 생성
- 컴포넌트의 렌더링이 자주 발생하거나 렌더링해야 할 컴포넌트 개수가 많아지면 <br/>
 이 부분을 최적화해 주는 것이 좋다

- Average.js

~~~

import React, { useState, useMemo, useCallback } from 'react';


const getAverage = numbers => {
    console.log('평균값 계산 중..');
    if (numbers.length === 0) return 0;
    const sum = numbers.reduce((a, b) => a + b);
    return sum / numbers.length;
};

const Average = () => {
    const [list, setList] = useState([]);
    const [number, setNumber] = useState('');

    const onChange = useCallback(e => {
        setNumber(e.target.value);
    }, []); // 컴포넌트가 처음 렌더링 될 때만 함수 생성

    const onInsert = useCallback(e => {
        const nextList = list.concat(parseInt(number));
        setList(nextList);
        setNumber('');
    }, [number, list]);
    // number 혹은 list가 바귀었을 때만 함수 생성

    const avg = useMemo(() => getAverage(list), [list]);

    return (
        <div>
            <input value={number} onChange={onChange} />
            <button onClick={onInsert}>등록</button>
            <ul>
                {list.map((value, index) => (
                    <li key={index}>{value}</li>
                ))}
            </ul>
            <div>
                <b>평균값:</b> {avg}
            </div>
        </div>
    );
};

export default Average;

~~~

> - useCallback의 첫 번째 파라미터에는 생성하고 싶은 함수를 넣고, <br/>
> - 두 번째 파라미터에는 배열을 넣으면 된다.
> - 이 배열에는 어떤 값이 바뀌었을 때 함수를 새로 생성해야 하는지 명시 해야한다
> - onChange처럼 비어 있는 배열을 넣게 되면 컴포넌트가 렌더링 될때 단 한번만 <br/>
>   생성되며, onInsert처럼 배열안에 number와 list를 넣게 되면 인풋 내용이 <br/>
>   바뀌거나 새로운 항목이 추가될때마다 함수가 생성
> - 함수 내부에서 상태 값에 의존해야 할 때는 그 값을 반드시 두번째 파라미터<br/>
>   안에 포함 시켜야 한다.

- onChange = 기존의 값을 조회하지 않고 바로 설정만 함 = 배열이 비어도 상관 없음
- onInsert = 기존의 number와 list를 조회해서 nextList를 생성하기 때문에 <br/>
    배열 안에 number와 list를 꼭 넣어 주어야 한다.

- useCallback 은 결국 useMemo로 함수를 반환하는 상황에서 더 편하게 사용할수 있는 hook
- 숫자, 문자열, 객체처럼 일반 값을 재사용하려면 useMemo를 사용
- 함수를 재사용하려면 useCallback 을 사용

~~~

useCallBack(() => {
    console.log('hello world!');
}, [])

useMemo(() => {
    const fn = () => {
        console.log('hello world');
    };
    return fn;
}, [])

~~~

<hr style="height: 1px; background: skyblue; "/>

#### useRef

- useRef Hook은 함수형 컴포넌트에서 ref를 쉽게 사용할 수 있도록 해준다.
- Average 등록 버튼을 눌렀을때 포커스가 인풋쪽으로 넘어가도록 코드를 작성

- Average.js

~~~

import React, { useState, useMemo, useCallback,useRef } from 'react';


const getAverage = numbers => {
    console.log('평균값 계산 중..');
    if (numbers.length === 0) return 0;
    const sum = numbers.reduce((a, b) => a + b);
    return sum / numbers.length;
};

const Average = () => {
    const [list, setList] = useState([]);
    const [number, setNumber] = useState('');
    const inputEl = useRef(null);

    const onChange = useCallback(e => {
        setNumber(e.target.value);
    }, []); // 컴포넌트가 처음 렌더링 될 때만 함수 생성

    const onInsert = useCallback(e => {
        const nextList = list.concat(parseInt(number));
        setList(nextList);
        setNumber('');
        inputEl.current.focus();
    }, [number, list]);
    // number 혹은 list가 바귀었을 때만 함수 생성

    const avg = useMemo(() => getAverage(list), [list]);

    return (
        <div>
            <input value={number} onChange={onChange} ref={inputEl} />
            <button onClick={onInsert}>등록</button>
            <ul>
                {list.map((value, index) => (
                    <li key={index}>{value}</li>
                ))}
            </ul>
            <div>
                <b>평균값:</b> {avg}
            </div>
        </div>
    );
};

export default Average;

~~~


#### 로컬 변수 사용하기

- 추가로 컴포넌트 로컬 변수를 사용해야 할때 useRef를 활용 가능
- 여기서 로컬 변수란 렌더링과 상관없이 바뀔수 있는 값을 의미
- 클래스 형태로 작성된 컴포넌트는 

~~~

import React, {Component} from 'react';

class MyComponent extends Component {
    id = 1
    setId = (n) => {
        this.id = n;
    }
    prindId = () => {
        console.log(this.id);
    }
    render() {
        return (
            <div>
                MyComponent
            </div>
        );
    }
}
export default MyComponent;

~~~

~~~

import React , {useRef} from 'react';

const RefSample = () => {
    const id = useRef(1);
    const setId = (n) => {
        id,current = n;
    }
    const printId = () => {
        console.log(id.current);
    }
    return (
        <div>
            refsample
        </div>
    );
};

export default RefSample;

~~~

<hr style="height: 1px; background: skyblue; "/>

#### 커스텀 hooks 만들기

- Info 컴포넌트에서 여러개 인풋을 관리하기 위해 useReducer로 작성했던 로직을
- useInputs라는 Hook으로 따로 분리하자

- useInput.js

~~~

import { useReducer } from 'react';

function reducer(state, action) {
    return {
        ...state,
        [action.name]: action.value
    };
}

export default function useInputs(initialForm) {
    const [state, dispatch] = useReducer(reducer, initialForm);
    const onChange = e => {
        dispatch(e.target);

    };
    return [state, onChange];
}

~~~

- Info.js

~~~

import React from 'react';
import useInputs from './useInputs';


const Info = () => {

    const [state, onChange] = useInputs({
        name: '',
        nickname: ''
    });

    const { name, nickname } = state;

 
    return (
        <div>
            <div>
                <input name="name" value={name} onChange={onChange} />
                <input name="nickname" value={nickname} onChange={onChange} />
            </div>
            <div>
                <div>
                    <b>이름:</b> {name}
                </div>
                <div>
                    <b>닉네임:</b> {nickname}
                </div>
            </div>
        </div>
    );
};

export default Info;


~~~



<hr style="height: 1px; background: skyblue; "/>

> 리액트를 다루는 기술 책을 보고 공부한 것을 정리하여 올린 글입니다.<br/>
> 출처: 길벗 리액트를 다루는 기술 <br/>







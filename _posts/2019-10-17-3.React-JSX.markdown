---
layout: post
title:  "1017-[React]-3.React JSX"
subtitle:   "1017-3.JSX"
categories: devlog
tags: react
---

## React JSX

<hr style="height: 1px; background: skyblue; "/>

create-react-app 으로 hello-react 디렉터리

- src/App.js

~~~

import React from 'react'; 
import logo from './logo.svg';
import './App.css';

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p>
          Edit <code>src/App.js</code> and save to reload.
        </p>
        <a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React
        </a>
      </header>
    </div>
  );
}

export default App;


~~~

<hr style="height: 1px; background: skyblue; "/>

~~~

import React from 'react'; 

~~~

- 노드 모듈 안에 생긴 리액트 모듈을 불러와서 사용
    - Node.js 에서 지원하는 기능으로 브라우저가 아닌 환경에서 자바스크립트를 실행 할수 있게 해주는 것
    - Node에서는 import 가 아닌 require라는 구문으로 패키지를 불러올 수 있다.
    - 이러한 기능을 사용하기 위해 번들러(bundler)를 사용


<img style="float: left;" src="https://user-images.githubusercontent.com/49095304/69899903-022e9300-13b0-11ea-8c4f-7e0d012fadd8.png" width="380"/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>

- 번들러 도구를 사용하면 import 로 모듈을 불러왔을 때 불러온 모듈은 모두 합쳐서 하나의 파일로 생성 해준다.
- 또 최적화 과정에서 여러개 파일로 분리 될 수 있다.

<hr style="height: 1px; background: skyblue; "/>

~~~

import logo from './logo.svg';
import './App.js';

~~~

- 웹팩을 사용하면 svg 파일과 css 파일도 불러와서 사용 할 수 있다.
    - 이것은 웹팩의 로더(loader)에서 담당



<hr style="height: 1px; background: skyblue; "/>

~~~

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p>
          Edit <code>src/App.js</code> and save to reload.
        </p>
        <a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React
        </a>
      </header>
    </div>
  );
}

export default App;

~~~

- 이 코드는 App 이라는 컴포넌트를 만들어 준다.

- function 키워드 = 함수형 컴포넌트 

- 컴포넌트를 렌더링 하면 함수에서 반환하고 있는 내용을 나타낸다.

- 함수에서 반환 하는 내용은 JSX 라고 부른다.


<hr style="height: 1px; background: skyblue; "/>


## JSX 란

1. 자바스크립트 확장 문법
    - 리액트를 개발 할 때 사용 되므로 공식적인 자바 스크립트 문법은 아님.
    - 바벨을 통해 개발자들이 임의로 만든 문법, 혹은 차기 자바스크립트의 문법 사용 가능
2. XML 과 비슷하다.

#### JSX 의 장점

1. 높은 가독성
2. 더욱 높은 확용도

<hr style="height: 1px; background: skyblue; "/>

## JSX 문법

- 올바르게 사용하기 위해선 규칙을 준수해야 한다.

1. 감싸인 요소
    - 컴포넌트에 여러 요소가 있다면 반든시 부모 요소 하나로 감싸줘야 한다.

- src/App.js

~~~

import React from 'react';

function App() {
    return(
        <h1>리액트 테스트</h1>
        <h1>리액트 테스트2</h1>
    )
}

~~~

- 부모 요소가 없으므로 작동하지 않음.


- src/App.js

~~~

function App() {
    return(
        <div>
        <h1>리액트 테스트</h1>
        <h1>리액트 테스트2</h1>        
        </div>
    )
}

~~~

- Virtual DOM에서 컴포넌트 변화를 효과적으로 감지할때 내부의 하나의 DOM 트리 구조로 이루어져야 한다는 규칙이 있다.

- 리액트 v16 이상에서는 Fragment 사용 가능

~~~

import React, { Fragment } from 'react';

function App() {
    return(
        <Fragment>
        <h1>리액트 테스트</h1>
        <h1>리액트 테스트2</h1>   
        </Fragment>
    )
}

~~~

~~~

import React from 'react';

function App(){
    return(
        <>
        <h1>리액트 테스트</h1>
        <h1>리액트 테스트2</h1>   
        </>
    )
}

~~~

- 위 두개의 코드는 같다.

<hr style="height: 1px; background: skyblue; "/>

#### result

<img style="float: left;" src="https://user-images.githubusercontent.com/49095304/69901466-4e380280-13c5-11ea-8500-1684f2f93729.JPG" width="250"/><br/><br/><br/><br/><br/><br/><br/>

<hr style="height: 1px; background: skyblue; "/>


2. 자바스크립트 표현

JSX에서 자바스크립트 표현식을 쓰려면 <strong>"{ }"</strong> 코드안에 기입 하면 된다.
<br/>

- src/App.js

~~~

import React from 'react';

function App(){
    const name = '리액트';

    return (
        <div>
          <h1>{name} 테스트</h1>
          <h1>리액트 테스트2</h1>   
        </div>
    )
}

~~~

- ES6의 const 와 let

> ES6 이전의 값을 담는 데 VAR 키워드 사용 </br>
> var 키워드는 scope(해당 값을 사용 할 수 있는 코드 영역)<br/>
> if문 바깥에서 var 값을 hello로 선언<br/>
> if문 내부에서 bye 로 설정 <br/>

~~~

function myFunction(){
    var a = "hello";
    if?(true) {
        var a = "bye";
        console.log(a); // bye
    }
    console.log(a); //bye
}
myFunction();

~~~

> if문 내부에서 새로 선언 하였음에도 if문 밖에서 a 를 조회하면 변경된 값으로 나옴


- 이런 결점을 해결해주는 것이 let 과 const

~~~

function myFunction(){
    let a = 1;
    if(true) {
        let a = 2;
        console.log(a); // 2
    }
    console.log(a); // 1
}
myFunction();

~~~

> let 과 const 는 블럭 단위, if 문 내부에서 선언한 a 값은 if 문 밖의 a 값을 변경하지 않음. <br/>

- let 과 const 를 사용 할때 같은 블록 내부에서 중복 선언 불가능 하다는 것을 주의

<hr style="height: 1px; background: skyblue; "/>

3. If 문 대신 조건부 연산자

- JSX 내부의 자바스크립트 표현식에서 if 문을 사용할 수는 없다. 
- 하지만 { } 안에 조건부 연산자를 사용하면 가능

~~~

import React from 'react';

function App() {
    const name = "리액트";

    return (
        <div>
        {name === '리액트'? (
        <h1>리액트 테스트 성공</h1>) : (
        <h1>리액트 테스트 실패</h1>
        )}
        </div>
    )

}

~~~

<img style="float: left;" src="https://user-images.githubusercontent.com/49095304/69901814-dc15ec80-13c9-11ea-8bcb-5b1b6c86e189.JPG" width="200"/><br/><br/><br/><br/><br/><br/><br/>

<hr style="height: 1px; background: skyblue; "/>

4. AND 연산자(&&)를 사용한 조건부 렌더링

src/App.js

~~~

import React from 'react';

function App() {
    const name = 'react';
    return <div>{name === '리액트' ? <h1>리액트입니다.</h1>}</div>
}

~~~

result -> null

src/App.js

~~~

import React from 'react';

function App() {
    const name = 'react';

return <div>{name === '리액트' && <h1>리액트입니다.</h1>}</div>
}

~~~

result -> 리액트입니다. <br/>
<strong>&&연산자</strong>

<hr style="height: 1px; background: skyblue; "/>

5. undefined 렌더링 X

<hr style="height: 1px; background: skyblue; "/>

6. 인라인 스타일링

- 리액트에서 DOM 요소에 스타일을 적용할 때는 문자열 형태로 넣는 것이 아니라 <br/>
    객체 형태로 넣어야 한다.
- CSS 에서 사용했던 스타일 요소인 background-color 처럼 카멜 표기법을 사용하지 않고 <br/>
    backgroundColor 로 작성

src/App.js

~~~

import React from 'react';

function App() {

    const name = '리액트';
    const style = {
        backgroundColor: 'black',
        color: 'aqua',
        fontSize: '48px',
        fontWeight: 'bold',
        padding: 16
        };
    return <div style={style}>{name}</div>;
    }
}

export default App;

~~~

~~~

<div style={ }> </div>

~~~

이런 식으로도 가능

<hr style="height: 1px; background: skyblue; "/>

7. class 대신 className 으로 사용

8. 태그는 열었으면 닫아야 한다.

9. 주석
    > // 한줄 주석
    > /* */ 여러줄 주석

<hr style="height: 1px; background: skyblue; "/>

> 리액트를 다루는 기술 책을 보고 공부한 것을 정리하여 올린 글입니다.<br/>
> 출처: 길벗 리액트를 다루는 기술 <br/>


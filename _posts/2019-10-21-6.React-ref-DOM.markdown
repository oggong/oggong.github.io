---
layout: post
title:  "1021-[React]-6.React ref-dom"
subtitle:   "1021-6.React ref-dom"
categories: devlog
tags: react
---

## React ref-dom

<hr style="height: 1px; background: skyblue; "/>

- html 에서 DOM 요소에 이름을 달때는 id 사용 

```

 <div id="example1"> </div>

```


> - 특정 DOM 요소에 어떤 작업을 해야 할 때 이렇게 요소에 id를 달면 <br/>
>   CSS에서 특정 id에 특정 스타일을 적용하거나 자바스크립트에서 <br/>
>   해당 id를 가진요소를 찾아서 작업 가능

- ref (reference) 개념 <br/>


- App.js


~~~

import React, { Component } from 'react';

import ValidationSample from './ValidationSample';

class App extends Component {

  render() {
    return (<ValidationSample />
    );
  }
};

export default App;


~~~

- ValidationSample.js

~~~

import React , {Component} from 'react';
import './ValidationSample.css';

class ValidationSample extends Component {
    state = {
        password: '',
        clicked: false,
        validated: false
    }

    handleChange = (e) => {
        this.setState({
            password: e.target.value
        });
    }

    handleButtonClick = () => {
        this.setState({
            clicked: true,
            validated: this.state.password === '0000'
        })
    }

    render() {
        return(
            <div>
                <input
                    type="password"
                    value={this.state.password}
                    onChange={this.handleChange}
                    className={this.state.clicked ? (this.state.validated ? 'success' : 'failure') : ''}/>
                <button onClick={this.handleButtonClick}>검증하기</button>
            </div>
        );
    }
}

export default ValidationSample;

~~~

- ValidationSample.css

~~~

.success {
    background-color: lightgreen;
}

.failure {
    background-color: lightcoral;
}

~~~

> - 리액트에서는 굳이 DOM에 접근하지 않아도 state로 구현할 수 있다.
> - input에서는 onChange 이벤트가 발생하면 handleChange를 호출 하여 state의 <br/> 
> password 값을 업데이트
> - button 에서는 onClick 이벤트가 발생하면 handleButtonClick을 호출
> - clicked 값을 참으로 설정, validated 값을 검증 결과로 설정
> - input의 className 값은 버튼을 누르기전에는 비어 있는 문자열 전달
> - 버튼을 누른 후에는 검증 결과에 따라 success 값 또는 failure 값을 설정
> - 이 값에 따라 input 생상이 초록, 빨간색으로 나타난다.

<hr style="height: 1px; background: skyblue; "/>

#### DOM을 꼭 사용해야하는 상황

> state만으로 해결할 수 없는 기능 있다.

- 특정 input에 포커스 주기
- 스크롤 박스 조작하기
- Canvas 요소에 그림 그리기 등

<hr style="height: 1px; background: skyblue; "/>

#### ref 사용

- 콜백 함수를 통한 ref 설정
  - ref를 만드는 가장 기본적인 방법은 콜백 함수를 사용하는 것
  - ref를 달고자 하는 요소에 ref라는 콜백 함수를 props로 전달해 주면 된다.
  - 이 콜백 함수는 ref 값을 파라미터로 전달 받는다.
  - 함수 내부에서 파라미터로 받은 ref를 컴포넌트의 멤버 변수로 설정

~~~

<input ref={(ref) => {this.input=ref}} />

~~~

- this.input은 input 요소의 DOM을 가리킴
- ref의 이름은 원하는 것으로 지정 가능
- DOM 타입과 관계 없이 this.superman = ref 처럼 마음대로 지정

#### createRef 를 통한 ref 설정

- ref를 만드는 또 다른 방법은 리액트에 내장되어 있는 createRef라는 함수를 사용
- 이 함수를 사용하면 더 적은 코드로 쉽게 사용 가능
- 이 기능은 리액트 v16.3부터 도입

> - createRef를 사용하여 ref를 만들려면 우선 컴포넌트 내부에서 멤버 변수로 <br/>
> React.createRef()를 담아주어야 함.
> - 해당 멤버 변수를 ref를 달고자 하는 요소에 ref props 로 넣어주면 ref 설정이 완료
> - 설정 뒤 ref를 설정해 준 DOM에 접근하려면 this.input.current를 조회하면 된다.
> - .current가 차이점!!


- ValidationSample.js

~~~

import React , {Component} from 'react';
import './ValidationSample.css';

class ValidationSample extends Component {
    state = {
        password: '',
        clicked: false,
        validated: false
    }

    handleChange = (e) => {
        this.setState({
            password: e.target.value
        });
    }

    handleButtonClick = () => {
        this.setState({
            clicked: true,
            validated: this.state.password === '0000'
        });
        this.input.focus();
    }

    render() {
        return(
            <div>
                <input
                    ref={(ref) => this.input=ref}
                    type="password"
                    value={this.state.password}
                    onChange={this.handleChange}
                    className={this.state.clicked ? (this.state.validated ? 'success' : 'failure') : ''}/>
                <button onClick={this.handleButtonClick}>검증하기</button>
            </div>
        );
    }
}

export default ValidationSample;

~~~

- 버튼을 누르면 포커스가 버튼으로 넘어가면서 왼쪽 input 요소의 텍스트 커서가 더이상 
  보이지 않습니다.
- 버튼에서 onClick 이벤트가 발생할때 input에 포커스 
- this.input이 컴포넌트 내부의 input 요소를 가키리고 있으니, 
  this.input.focus();
    - 코드 작성

<hr style="height: 1px; background: skyblue; "/>

#### 컴포넌트에 ref 달기

- 리액트에서는 컴포넌트에도 ref를 달 수 있다.
- 이 방법은 주로 컴포넌트 내부에 있는 DOM을 컴포넌트 외부에서 사용할때 사용
- 컴포넌트에 ref를 다는 방법은 DOM에 ref를 다는 방법과 같음

~~~

<MyComponent
  ref={(ref) => {this.myComponent=ref}}
  />

~~~

MyComponent 내부의 메서드 및 멤버 변수에도 접근할 수 있다.
즉, 내부의 ref에도 접근할 수 있다.
(myComponent.handleClick, myComponent.input 등)


### ScrollBar

~~~

import React, { Component } from 'react';

class ScrollBox extends Component {

    scrollToBottom = () => {
        const { scrollHeight, clientHeight} = this.box;
        /*
            앞 코드에는 비구조화 할당 문법을 사용
            const scrollHeight = this.box.scrollHeight;
            const clientHeight = this.box.clientHeight;
        */
       this.box.scrollTop = scrollHeight - clientHeight;
    }


    render() {
        const style = {
            border: '1px solid black',
            height: '300px',
            width: '300px',
            overflow: 'auto',
            position: 'relative',
        };

        const innerStyle = {
            width: '100%',
            height: '650px',
            background: 'linear-gradient(white, black)'
        }

        return (
            <div
                style={style}
                ref={(ref) => { this.box = ref }}>
                <div style={innerStyle} />
            </div>
        );
    }
}

export default ScrollBox;

~~~

App.js

~~~

import React, { Component } from 'react';

import ScrollBox from './ScrollBox';

class App extends Component {

  render() {
    return (
      <div>
        <ScrollBox ref={(ref) => this.scrollBox = ref} />
        <button onClick={() => this.scrollBox.scrollToBottom()}>
          맨 밑으로
      </button>
      </div>
    );
  }
};

export default App;


~~~

- onClick = {this.scrollBox.scrollBottom} 같은 형식으로 작성해도 틀린것은 아님
- 하지만 컴포넌트가 처음 렌더링 될때 this.scrollBox 값이 undefined이므로
  this.scrollBox.scrollToBottom 값을 읽어 오는 과정에서 오류가 발생
- 화살표 함수 문법 사용 하여 아예 새로운 함수를 만들고 그 내부에서 
  this.scrollBox.scrollToBottom 메서드를 실행하면, 버튼을 누를때 <br/>
  this.scrollBox.scrollToBottom 값을 읽어와서 실행하므로 오류 발생하지 않는다.

<hr style="height: 1px; background: skyblue; "/>

- result

<img style="float: left;" src="https://user-images.githubusercontent.com/49095304/70506855-9518bb80-1b6e-11ea-9582-0a30fd180930.JPG" width="400"><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>


<hr style="height: 1px; background: skyblue; "/>

> 리액트를 다루는 기술 책을 보고 공부한 것을 정리하여 올린 글입니다.<br/>
> 출처: 길벗 리액트를 다루는 기술 <br/>







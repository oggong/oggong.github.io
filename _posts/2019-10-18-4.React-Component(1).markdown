---
layout: post
title:  "1018-[React]-4.React Component (1)"
subtitle:   "1018-4.Component"
categories: devlog
tags: react
---

## React Component

<hr style="height: 1px; background: skyblue; "/>

1. 클래스형 컴포넌트 

src/App.js

~~~

import React, {Component} from 'react';
import './App.css';

class App extends Components {
    render() {
        const name = 'react';
        return <div className="react">{name}</div>;
    }
}

export default App;

~~~

- 클래스형 컴포넌트에서는 render() 함수가 꼭 있어야 한다.<br/>
    그 안에서 보여주어야 할 JSX를 반환해야 한다.

> 함수형 컴포넌트의 장점 <br/>
>   1. 클래스형 컴포넌트보다 선언하기 편함
>   2. 메모리 자원도 클래스형 컴포넌트보다 덜 사용
>   3. 프로젝트 완성 후 배포시 결과물의 파일 크기가 더 작다 (사실 별 차이 없다)

> 함수형 컴포넌트의 단점 <br/>
>   1. state와 라이프사이클 API 사용 불가능
- 그러나 react hooks를 이용해 해결 가능 (리액트 v16.8 이후)
- 리액트 공식 매뉴얼에서는 컴포넌트 작성시 함수형 추천
- but 그렇다고 해서 클래스형이 사라지지 않으니 알아두자!!

<hr style="height: 1px; background: skyblue; "/>

### 코드 작성

<font size="4"><strong> 1. 컴포넌트를 만들기 위해 컴포넌트 코드를 선언 </strong></font>

src 디렉터리에 MyComponent.js 선언

src/MyComponent.js

~~~

import React from 'react';

const MyComponent = () => {
    return <div>나의 컴포넌트 선언</div>
};

export default MyComponent;

~~~

- ES6 화살표 함수
    - 이 문법은 주로 함수를 파라미터로 전달할 때 유용

<font size="4"><strong>2. 모듈 내보내기 및 불러오기</strong></font>

~~~

export default MyComponent;

~~~

- 다른 파일에서 이 파일을 import 할 때, 위에서 선언한 MyComponent 클래스를 불러오도록 설정


src/App.js

~~~

import React from 'react';
import MyComponent from './MyComponent';

const App = () => {
    return <MyComponent/>;
};

export default App;

~~~

- App.js 파일에서 MyComponent 컴포넌트를 불러와서 사용

<hr style="height: 1px; background: skyblue; "/>

<font size="4"><strong> 3. props </strong></font>
> props 는 properties 를 줄인 표현 <br/>
> 컴포넌트 속성을 설정할 때 사용하는 요소 <br/>
> props 값은 해당 컴포넌트를 불러와 사용하는 부모 컴포넌트에서 설정 가능 (지금은 App 이 부모)

- props 지정

src/App.js

~~~

import React from 'react';
import MyComponent from './MyComponent';

const App = () => {
    return <MyComponent name="React"/>;
};

export default App;

~~~

src/MyComponent.js

~~~

import React from 'react';

const MyComponent = props => {
    return <div>안녕하세요, 제 이름은 {props.name}입니다.</div>;
};

export default MyComponent;


~~~

<img style="float: left;" src="https://user-images.githubusercontent.com/49095304/69909465-d4dcf600-143e-11ea-9bab-a0ff609eca06.JPG" width="250"><br/><br/>

- props 기본값 설정: defaultProps

~~~

import React from 'react';

const MyComponent = props => {
    return <div>안녕하세요, 제 이름은 {props.name} 입니다.</div>;
};

MyComponent.defaultProps = {
    name: "기본 이름"
};

export default MyComponent;

~~~

<img style="float: left;" src="https://user-images.githubusercontent.com/49095304/69909569-05715f80-1440-11ea-951e-38714619d547.JPG" width="250"><br/><br/>

<hr style="height: 1px; background: skyblue; "/>


<font size="4"><strong> 4. children </strong></font>

- 리액트 컴포넌트 사용할 때 태그 사이의 내용을 보여주는 props 

src/App.js

~~~

import React from 'react';

import MyComponent from './MyComponent';

const App = () => {


  return <MyComponent>리액트3</MyComponent>;

};

export default App;


~~~

src/MyComponent.js

~~~

import React from 'react';

const MyComponent = props => {
    return <div>안녕하세요, 제 이름은 {props.name} 입니다. <br />
        children 값은 {props.children}
    </div>;
};

MyComponent.defaultProps = {
    name: "기본 이름"
};

export default MyComponent;

~~~

<img style="float: left;" src="https://user-images.githubusercontent.com/49095304/69909646-7f561880-1441-11ea-8ae7-1368c1d9804d.JPG" width="250"><br/><br/><br/>


<hr style="height: 1px; background: skyblue; "/>

<font size="4"><strong> 5. 비구조화 할당 문법으로 props 내부 값 추출하기 </strong></font>

- props 값을 조회할 때 마다 props.name , props.children 과 같이 props 키워드를 사용

- 더편하게 사용하기 위해 ES6 비구조화 할당 문법을 사용 


src/MyComponent.js

~~~

import React from 'react';

const MyComponent = props => {

    const { name , children } = props;

    return (<div>안녕하세요, 제 이름은 { name } 입니다. <br />
        children 값은 { children }
    </div>);
};

MyComponent.defaultProps = {
    name: "기본 이름"
};

export default MyComponent;


~~~

<img style="float: left;" src="https://user-images.githubusercontent.com/49095304/69915284-a2f47f80-1490-11ea-819e-e5f80f0629e7.JPG" width="250"><br/><br/>




- 이렇게도 사용가능 하다!
- 객체에서 값을 추출하는 문법을 비구조화 할당 이라 한다.
- 이 문법은 구조 분해 문법 이라고도 불린다.
- 함수의 파라미터 부분에서도 사용 할수 있다.
    - 함수의 파라미터가 객체라면 그 값을 바로 비구조화해서 사용하는 것

src/MyComponent.js

~~~

import React from 'react';

const MyComponent = ({ name, children }) => {

    return (
        <div>
        안녕하세요, 제 이름은 { name } 입니다. <br />
        children 값은 { children } 입니다.
        </div>
    );
};

MyComponent.defaultProps = {
    name: "기본 이름"
};

MyComponent.propTypes = {
    name : PropTypes.string
};

export default MyComponent;


~~~


<hr style="height: 1px; background: skyblue; "/>

> 리액트를 다루는 기술 책을 보고 공부한 것을 정리하여 올린 글입니다.<br/>
> 출처: 길벗 리액트를 다루는 기술 <br/>






---
layout: post
title:  "0516-[Oracle]-9.PL-SQL"
subtitle:   "0515-PL-SQL"
categories: devlog
tags: Oracle

---
## PL-SQL

<hr style="height: 1px; background: skyblue; "/>

#### PL-SQL

~~~

SET SERVEROUTPUT ON
DECLARE
  v_empno number;
  v_ename varchar2(30);
  v_hiredate date;
BEGIN
  SELECT empno, ename, hiredate
  INTO v_empno, v_ename, v_hiredate
FROM emp
WHERE ename=upper('SCOTT');

-- “” 사용하면 에러 ‘’사용해야
  dbms_output.put_line('사번 #' || v_empno);
  dbms_output.put_line('이름 #' || v_ename);
  dbms_output.put_line('입사일 #' || v_hiredate);
END;
/

SET SERVEROUTPUT ON
ACCEPT p_ename PROMPT '조회할 사원 이름은?'
DECLARE
  -- EMP 테이블의 컬럼들로 레코드타입 변수 선언
  emp_record  emp%ROWTYPE;
  -- 입력한 이름을 저장할 변수 선언
  v_ename     emp.ename%TYPE := '&p_ename'; -- String ename = msg;
BEGIN
SELECT *              -- *는 emp%ROWTYPE으로 정의시 가능
  INTO emp_record
  FROM emp
  WHERE ename = upper( v_ename );
  dbms_output.put_line('사원번호 : ' || to_char(emp_record.empno) );
  dbms_output.put_line('사 원 명 : ' || emp_record.ename );
  dbms_output.put_line('업    무 : ' || emp_record.job );
EXCEPTION
WHEN NO_DATA_FOUND THEN dbms_output.put_line('&p_ename' || '의 자료는 없습니다');
  WHEN TOO_MANY_ROWS THEN dbms_output.put_line('&p_ename' || '자료가 2건 이상입니다.');
  WHEN OTHERS THEN dbms_output.put_line('검색시 오류가 발생하였습니다.');
END;
/

-- 1. 이름, 급여, 부서번호를 입력 받아 사원 테이블에 입력 시 부서번호가 20이면 급여의 30%를 추가하고, 사번은 시퀸스를 이용한다.
ACCEPT p_name PROMPT '이름?'
ACCEPT p_sal PROMPT '월급?'
ACCEPT p_deptno PROMPT '부서번호?'

DECLARE
    v_name  emp.ename%type := '&p_name';
    v_sal   emp.sal%type := '&p_sal';
    v_deptno   emp.deptno%type := '&p_deptno';

BEGIN
    IF v_deptno = 20 THEN v_sal := v_sal * 1.3;
    END IF;
    INSERT INTO emp(empno, ename, sal, deptno)
        VALUES (seq_emp_empno.nextval, v_name, v_sal, v_deptno);
    COMMIT;
END;
/
SELECT * FROM emp;

-- 2. 이름을 입력받아 그 사람의 업무가 MANAGER이면 10%, ANALYST이면 20%, SALESMAN이면 30%, PRESIDENT이면 40%, CLERK이면 50% 급여를 증가한다.
ACCEPT p_name PROMPT '이름?'
DECLARE
    v_name  emp.ename%type   := '&p_name';
    v_job   emp.job%type;
    v_sal   emp.sal%type;
    v_empno emp.empno%type;

BEGIN
    -- 1. 이름으로 검색한 결과를 내부변수에 저장 (SELECT)
    SELECT empno, sal, job
    INTO v_empno, v_sal, v_job -- 내부변수 저장
    FROM emp WHERE ename = v_name;
    -- 2. 업무에 따른 월급 증가 계산 (IF/CASE)
    CASE v_job WHEN 'MANAGER' THEN v_sal := v_sal * 1.1;
    WHEN 'ANALYST' THEN v_sal := v_sal * 1.2;
    WHEN 'SALESMAN' THEN v_sal := v_sal * 1.3;
    WHEN 'PRESIDENT' THEN v_sal := v_sal * 1.4;
    WHEN 'CLERK' THEN v_sal := v_sal * 1.5;
    ELSE v_sal := v_sal; -- 없어도 되는 문장
    END CASE;
    -- 3. 해당 사원의 월급을 수정 (UPDATE)
    UPDATE emp
    SET sal = v_sal
    WHERE empno = v_empno;
    dbms_output.put_line(v_name || '님 정보 수정');
    COMMIT;
END;
/

-- [구구단]
ACCEPT p_dan PROMPT  '구구단 단을 입력 : '
DECLARE
  v_dan   INTEGER := &p_dan;
  cnt     INTEGER;
BEGIN
    FOR i IN 1..9 LOOP
        cnt := v_dan * i;
        dbms_output.put_line( v_dan || ' * ' || i || ' = ' || cnt );
    END LOOP;   
END;
/

-- 1. 1부터 100까지의 홀수의 합과 짝수의 합을 출력(나머지연산자 : mod)
DECLARE
    v_odd   INTEGER := 0;
    v_even  INTEGER := 0;
BEGIN
    FOR i IN 1..100 LOOP
        IF i mod 2 = 0 THEN v_even := v_even + i;
        ELSE v_odd := v_odd + i;  
        END IF;
    END LOOP;
    dbms_output.put_line('짝수의 합' || v_even);
    dbms_output.put_line('홀수의 합' || v_odd);
END;
/

-- 2. 부서번호를 입력 받아 사원번호, 이름, 급여를 출력
ACCEPT p_deptno PROMPT '부서번호?'

DECLARE
    v_deptno    emp.deptno%type := &p_deptno;
    v_empno     emp.empno%type;
    v_ename     emp.ename%type;
    v_sal       emp.sal%type;
    CURSOR emp_cursor IS SELECT empno, ename, sal FROM emp WHERE deptno = v_deptno ORDER BY ename;
BEGIN
    OPEN emp_cursor;
    LOOP
        FETCH emp_cursor INTO v_empno, v_ename, v_sal;
        EXIT WHEN emp_cursor%NOTFOUND;
        dbms_output.put_line(lpad(v_empno, 6) || lpad(v_ename, 10) || lpad(v_sal, 10));
    END LOOP;
    CLOSE emp_cursor;
END;
/

-- 3. 업무를 입력 받아 각 업무별 평균급여와 최소/최대 급여를 출력
ACCEPT p_job PROMPT '업무?'
DECLARE
    v_job   emp.job%type := &p_job;
    v_sal   emp.sal%type;
    v_avg_sal   
    CURSOR emp_cursor IS SELECT job, round(avg(sal)), min(sal), max(sal) FROM emp WHERE job = v_deptno GROUP BY job;
BEGIN
    OPEN emp_cursor;
    LOOP
        FETCH emp_cursor INTO v_sal;
        EXIT WHEN emp_cursor%NOTFOUND;
        dbms_output.put_line(lpad(v_empno, 6) || lpad(v_ename, 10) || lpad(v_sal, 10));
    END LOOP;
    CLOSE emp_cursor;
END;
/



~~~

<hr style="height: 1px; background: skyblue"/>

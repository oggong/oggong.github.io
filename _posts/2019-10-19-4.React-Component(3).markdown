---
layout: post
title:  "1019-[React]-4.React Component (3)"
subtitle:   "1019-4.Component"
categories: devlog
tags: react
---

## React Component (3)

<hr style="height: 1px; background: skyblue; "/>

<font size="4"><strong> state </strong></font>

> state는 컴포넌트 내부에서 바뀔 수 있는 값을 의미한다. <br/>
> props는 컴포넌트가 사용되는 과정에서 부모 컴포넌트가 설정하는 값, <br/>
> 컴포넌트 자신은 해당 props를 읽기 전용으로만 사용할 수 있습니다. <br/>
> props를 바꾸려면 부모 컴포넌트에서 바꾸어주어야 한다. <br/>

- 리액트의 state는 두가지
- 클래스 형 컴포넌트가 지니고 있는 state
- 함수형 컴포넌트에서 useState라는 함수를 사용


#### 클래스형 컴포넌트의 state


Counter.js

~~~

import React, { Component } from 'react';

class Counter extends Component {
    constructor(props) {
        super(props);
        // state의 초깃값 설정하기
        this.state = {
            number: 0 
        };
    }
    render() {
        const { number } = this.state;
        // state를 조회할 때는 this.state로 조회함 
        return(
            <div>
                <h1>{number}</h1>
                <button
                // onClick을 통해 버튼이 클릭 되었을 때 호출할 때 함수를 지정
                onClick={() => {
                    //this.setState를 사용하여 state에 새로운 값을 넣을수 있다.
                    this.setState({ number: number + 1});
                }}
                >
                +1
                </button>
            </div>
        );
    }
}
export default Counter;

~~~


~~~

 constructor(props) {
        super(props);
        // state의 초깃값 설정하기
        this.state = {
            number: 0 
        };
    }

~~~

- 컴포넌트 생성자 메서드
- constructor 사용할 때에는 super(props)를 호출해야 한다.
- 이 함수가 호출되면 현재 클래스형 컴포넌트가 상속하고 있는 리액트의 Component 클래스가 지닌 
생성자 함수를 호출


~~~

render() {
        const { number } = this.state;
        // state를 조회할 때는 this.state로 조회함 
        return(
            <div>
                <h1>{number}</h1>
                <button
                // onClick을 통해 버튼이 클릭 되었을 때 호출할 때 함수를 지정
                onClick={() => {
                    //this.setState를 사용하여 state에 새로운 값을 넣을수 있다.
                    this.setState({ number: number + 1});
                }}
                >
                +1
                </button>
            </div>
        );
    }


~~~

- state를 조회할때 this.state
- button 안에 onClick의 값으로 props , 버튼이 클릭될때 호출 시킬 함수 설정 도와준다.
    - 이를 이벤트라고 한다.
- 이벤트로 설정할 함수를 넣어줄때는 arrow 문법 사용
    - this.setState 함수 사용
    - state 값 바꿀수 있게 도와줌



<img style="float: left;" src="https://user-images.githubusercontent.com/49095304/69959248-04c4f000-154a-11ea-8fb9-be2c30291afa.JPG" width="150"><br/><br/><br/><br/><br/>

<hr style="height: 1px; background: skyblue; "/>

#### state 객체 안에 여러 값이 있을 때


src/Counter.js

~~~

import React, { Component } from 'react';

class Counter extends Component {
    constructor(props) {
        super(props);
        // state의 초깃값 설정하기
        this.state = {
            number: 0,
            fixedNumber: 0
        };
    }
    render() {
        const { number, fixedNumber } = this.state;
        // state를 조회할 때는 this.state로 조회함 
        return(
            <div>
                <h1>{number}</h1>
                <h2>바뀌지 않는 값: {fixedNumber}</h2>
                <button
                // onClick을 통해 버튼이 클릭 되었을 때 호출할 때 함수를 지정
                onClick={() => {
                    //this.setState를 사용하여 state에 새로운 값을 넣을수 있다.
                    this.setState({ number: number + 1});
                }}
                >
                +1
                </button>
            </div>
        );
    }
}
export default Counter;

~~~

<img style="float: left;" src="https://user-images.githubusercontent.com/49095304/69959932-91bc7900-154b-11ea-9255-1574c1b511b1.JPG" width="200"><br/><br/><br/><br/><br/>

#### state를 constructor에서 꺼내기

src/Counter.js

~~~

import React, { Component } from 'react';

class Counter extends Component {
   
    state = {
        number: 0,
        fixedNumber: 0,
    }

    render() {
        const { number, fixedNumber } = this.state;
        // state를 조회할 때는 this.state로 조회함 
        return(
            <div>
                <h1>{number}</h1>
                <h2>바뀌지 않는 값: {fixedNumber}</h2>
                <button
                // onClick을 통해 버튼이 클릭 되었을 때 호출할 때 함수를 지정
                onClick={() => {
                    //this.setState를 사용하여 state에 새로운 값을 넣을수 있다.
                    this.setState({ number: number + 1});
                }}
                >
                +1
                </button>
            </div>
        );
    }
}
export default Counter;


~~~

<img style="float: left;" src="https://user-images.githubusercontent.com/49095304/69960088-f972c400-154b-11ea-93d7-d3f5b6c9f593.JPG" width="200"><br/><br/><br/><br/><br/>
<br/><br/>

- constructor 메서드를 선언하지 않고 state 초깃값을 설정할수 있다.

<hr style="height: 1px; background: skyblue; "/>

#### this.setState에 객체 대신 함수 인자 전달하기

~~~

    onClick={() => {
        this.setState({ number: number + 1});
        thist.setState({number: this.state.number + 1});
    }}


~~~

- this.setState를 두번 사용하는 것 같지만 클릭하면 1씩 더해진다
- this.setState 를 사용한다고 해서 state 값이 바로 바뀌지 않는다
- 해결책 : this.setState를 사용할때 객체 대신 인자로 넣어주는 것

~~~

    this.setState((prevState, props) => {
        return {
            //업데이트 하고싶은 내용
        }
    })

~~~

- prevState는 기존 상태이고, props는 현재 지니고 있는 props를 가리킵니다.
- 만약 업데이트하는 과정에서 props가 필요하지 않다면 생략

~~~

     <button
          // onClick을 통해 버튼이 클릭 되었을 때 호출할 때 함수를 지정
          onClick={() => {
              this.setState(prevState => {
                  return {
                      number: prevState.number + 1
                  };
              });
              // 위 코드와 아래 코드는 완전히 똑같은 기능을 한다.
              // 아래 코드는 함수에서 바로 객체를 반환한다는 의미
              this.setState(prevState => ({
                  number: prevState.number + 1
              }));
          }}
          >
          +1
     </button>

~~~

- 화살표 함수 example) const sum = (a, b) => a + b;
    - 화살표 함수에서 값을 바로 반환
- onClick에서 두번째로 this.setState 함수를 사용할때는 화살표 함수에서 바로 객체를 반환 하도록
    했기때문에 prevState => ({}) 와 같은 형태


#### this.setState가 끝난 후 특정 작업 실행하기

- setState를 사용하여 값을 업데이트 하고 난 다음에 특정 작업을 하고 싶을때 setState의 두번째    파라미터로 콜백(callback) 함수를 등록하여 작업을 처리할 수 있다.


~~~

     <button
          // onClick을 통해 버튼이 클릭 되었을 때 호출할 때 함수를 지정
          onClick={() => {
              this.setState(
                  {
                      number: number + 1
                  },
                  () => {
                      console.log("setState호출");
                      console.log(this.state);
                  }
              )
          
          }}
          >
          +1
     </button>

~~~

<img style="float: left;" src="https://user-images.githubusercontent.com/49095304/69961847-14473780-1550-11ea-93f3-e4985162e30c.JPG" width="500"><br/><br/><br/><br/><br/>

<hr style="height: 1px; background: skyblue; "/>

#### 함수형 컴포넌트에서 useState 사용 하기

> - 리액트 16.8 이전 버전에서는 함수형 컴포넌트에서 state 사용할 수 없었다. <br/>
> - 16.8 이후 useState라는 함수를 사용
>   - react hooks

#### 배열 비구조화 할당

- 객체 비구조화 할당 과 비슷
- 배열안에 들어 있는 값을 쉽게 추출 할 수 있도록 해주는 문법

~~~

const array = [1,2];
const one = array[0];
const two = array[1];

~~~

> - array 안에 있는 값을 one 과 two 에 담아주는 코드

- 배열 비구조화 할당을 사용하면

~~~

const array = [1,2];
const [one,two] = array;

~~~

src/Say.js

~~~

import React, { useState } from 'react';

const Say = () => {
    const [message, setMessage] = useState('');
    const onClickEnter = () => setMessage('입장하십니다');
    const onClickLeave = () => setMessage('퇴장하십니다');

    return (
        <div>
            <button onClick={onClickEnter}>입장</button>
            <button onClick={onClickLeave}>퇴장</button>
            <h1>{message}</h1>
        </div>
    )
}

export default Say;

~~~

<img style="float: left;" src="https://user-images.githubusercontent.com/49095304/69962682-d8ad6d00-1551-11ea-9a0f-3dd76d2e2df4.JPG" width="200" height="100">
<img style="float: left;" src="https://user-images.githubusercontent.com/49095304/69962683-d9460380-1551-11ea-981a-5ef76c5e69bc.JPG" width="200" height="100">
<br/><br/><br/><br/><br/>

> - useState 함수의 인자에는 상태의 초깃값을 넣어준다
> - 클래스 형 컴포넌트에서는 state 초깃값은 객체형태로 넣어 주엇다
> - but useState는 반드시 객체 아니어도 된다. 형태는 자유
> - 함수를 호출하면 배열이 반환
>   - 배열의 첫번째 원소는 현재 상태
>   - 두번째 원소는 상태를 바꾸어주는 함수
>   - 이 함수를 세터 (setter) 함수라고 부른다
> - 배열 비구조화를 통해 이름을 자유롭게 정해 줄 수 있다.

> - message 와 setMessage 라고 이름 설정
>   - text setText 해도 상관 없다.

<hr style="height: 1px; background: skyblue; "/>

#### 한 컴포넌트에서 useState 여러번 사용

~~~

import React, { useState } from 'react';

const Say = () => {
    const [message, setMessage] = useState('');
    const onClickEnter = () => setMessage('입장하십니다');
    const onClickLeave = () => setMessage('퇴장하십니다');

    const [color, setColor] = useState('black');

    return (
        <div>
            <button onClick={onClickEnter}>입장</button>
            <button onClick={onClickLeave}>퇴장</button>
            <h1 style={{color}}>{message}</h1>

        </div>
    )
}

export default Say;



~~~

<img style="float: left;" src="https://user-images.githubusercontent.com/49095304/69963312-52922600-1553-11ea-97b0-33c4f12e2065.JPG" width="200" />
<br/><br/><br/><br/><br/><br/>

<hr style="height: 1px; background: skyblue; "/>


## state 사용시 주의사항

> - state 값을 바꾸어야 할 때는 setState 혹은 useState를 통해 전달받은 세터 함수 사용

~~~

// 클래스형 컴포넌트
this.state.number = this.state.number + 1;
this.state.array = this.array.push(2);
this.state.object.value = 5;

// 함수형 컴포넌트 
const [object, setObject] = useState({a: 1, b: 1});
object.b = 2;

~~~

- 위의 코드는 틀린 코드 이다.

- 배열이나 객체를 업데이트 하려면
    - 배열이나 객체 사본을 만들고 그 사본 값을 업데이트 한 후 , 그 사본의 상태를 setState <br/>
    혹은 세터 함수를 통해 업데이트

~~~

// 객체 다루기 
const object = {a:1,b:2,c:3};
const nextObject = {...object,b:2}; //사본을 만들어서 b 값만 덮어 쓰기

// 배열 다루기
const array = {
    {id: 1, value: true},
    {id: 2, value: true},
    {id: 3, value: false}
};
let nextArray = array.concat({id:4}); //새항목 추가
nextArray.filter(item => item.id !== 2); // id가 2인 항목 제거
nextArray.map(item => (item.id ===1 ? {...item, value:false} : item));
// id가 1인 항목의 value를 false로 설정

~~~

<hr style="height: 1px; background: skyblue; "/>

## result

> - props는 부모 컴포넌트가 설정하고, state는 컴포넌트 자체적으로 지닌 값으로 <br/>
> 컴포넌트 내부에서 값을 업데이트 할 수 있다.
> - props는 무조건 고정적이진 않다
> - state를 자식 컴포넌트의 props로 전달하고, 자식 컴포넌트에서 특정 이벤트 발생할때 <br/>
> 부모 컴포넌트의 메서드를 호출하면 props도 유동적으로 사용 가능



<hr style="height: 1px; background: skyblue; "/>

> 리액트를 다루는 기술 책을 보고 공부한 것을 정리하여 올린 글입니다.<br/>
> 출처: 길벗 리액트를 다루는 기술 <br/>







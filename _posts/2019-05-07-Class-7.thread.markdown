---
layout: post
title:  "0507-[자바]-Class-7.thread"
subtitle:   "0507-thread"
categories: devlog
tags: Java

---
## thread

<hr style="height: 1px; background: skyblue; "/>

#### Process

~~~

package thread.basic;

import java.io.IOException;

public class Ex01_Process {

	public static void main(String[] args) {
		// 다른 응용 프로그램을 프로세스 실행
		Runtime rt = Runtime.getRuntime();
		try {
			rt.exec("C:\\Program Files\\internet explorer\\iexplore.exe");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

}



~~~

<hr style="height: 1px; background: skyblue"/>

#### RunnableTest

~~~

package thread.basic;

public class Ex02_RunnableTest {

	public static void main(String[] args) {
		MakeCar2 mc1 = new MakeCar2("차틀만들기");
		Thread t1 = new Thread(mc1); // mc1을 빼먹어도 에러 안나기 때문에 주의 해줘야 함!
		t1.start();

//		MakeCar1 mc2 = new MakeCar1("도색");
//		Thread t2 = new Thread(mc2);
//		t2.start(); // 동시에 작업하지 않지만 그렇게 보이게 하겠다1!!1111!
//----------------------------------------------------------------------
//		Thread t2 = new Thread(new MakeCar2("도색"));
//		t2.start();

//----------------------------------------------------------------------
		// 축약
		new Thread(new MakeCar2("도색")).start();

		System.out.println("프로그램 끝");
	}// main

}// Ex02_ThreadTest

class MakeCar2 implements Runnable { // 동시에 작업 하는 것 처럼 보이게
	String work;

	MakeCar2(String _work) {
		work = _work;
	}

	public void run() {
		for (int i = 0; i < 5; i++) {
			System.out.println(work + "작업중");

			try {
				Thread.sleep(500);
			} catch (InterruptedException e) {
			}

		}
	}
}


~~~

<hr style="height: 1px; background: skyblue"/>

#### ThreadTest

~~~

package thread.basic;

public class Ex02_ThreadTest {

	public static void main(String[] args) {
		MakeCar1 mc1 = new MakeCar1("차틀만들기");
		mc1.start();

		MakeCar1 mc2 = new MakeCar1("도색");
		mc2.start();

		System.out.println("프로그램 끝");
	}// main

}// Ex02_ThreadTest

class MakeCar1 extends Thread { // 동시에 작업 하는 것 처럼 보이게
	String work;

	MakeCar1(String _work) {
		work = _work;
	}

	public void run() {
		for (int i = 0; i < 5; i++) {
			System.out.println(work + "작업중");

			try {
				Thread.sleep(500);
			} catch (InterruptedException e) {
			}

		}
	}
}


~~~

<hr style="height: 1px; background: skyblue"/>

#### DalTest

~~~

package thread.basic;

import java.awt.*;
import javax.swing.*;

public class Ex3_DalTest extends Frame {

	Dal a, b, c;

	public Ex3_DalTest() {
		setSize(500, 400);
		setVisible(true);

		a = new Dal(this, 0, 50);
		b = new Dal(this, 0, 100);
		c = new Dal(this, 0, 150);

		// #
		// 각 객체의 쓰레드 메소드(run) 호출한다
		// 공정하게 해주려면 dal 이라는 배열 만들어서 random 처리 해주어야 함!!!
		new Thread(a).start(); // Thread 함수 호출 후 start
		new Thread(b).start();
		new Thread(c).start();
		// a.start();
		// b.start();
		// c.start();

	}

	public void paint(Graphics g) {
		g.setColor(Color.red);
		g.drawString("__@", a.x, a.y);

		g.setColor(Color.blue);
		g.drawString("__@", b.x, b.y);

		g.setColor(Color.green);
		g.drawString("__@", c.x, c.y);

	}

	public static void main(String args[]) {
		Ex3_DalTest dal = new Ex3_DalTest();

	}

}

/*
 * # Thread 처리 (1) Thread 클래스나 Runnable 인터페이스 상속 (2) run() 오버라이딩
 *
 * - 임의의 수를 speed 값으로 지정 - x 값을 위의 임의의 수를 더하기 - 화면을 다시 그린다 (*) app.repaint() 이용
 * - 임의의 수만큼 잠시 쓰레드를 블럭한다 # 위의 작업을 반복한다
 */
//class Dal extends Thread {
class Dal implements Runnable {
	int x, y;
	int speed;
	Frame app;

	public Dal(Frame _app, int _x, int _y) {
		app = _app;
		x = _x;
		y = _y;
	}

	public void run() {
		while (true) {
			speed = (int) (Math.random() * 10); // 0~9 임의의 수
			x += speed;
			app.repaint();
			try {
				Thread.sleep(speed * 100);
			} catch (InterruptedException e) {
			}
		}

	}
}


~~~

<hr style="height: 1px; background: skyblue"/>

#### CounterTest

~~~

package thread.basic;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextArea;

public class Ex4_CounterTest extends JFrame {
	private JPanel p1, p2;
	private JButton btn;
	private JTextArea ta;
	private JLabel lb;
	private boolean inputChk;

	public Ex4_CounterTest() {
		setTitle("단일 스레드 테스트!");
		p1 = new JPanel();
		p1.add(btn = new JButton("Click"));
		p1.add(lb = new JLabel("Count!"));// 추가
		add(p1, "North");

		p2 = new JPanel();
		p2.add(ta = new JTextArea(20, 50));
		add(p2);

		setBounds(200, 200, 600, 400);
		setVisible(true);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		btn.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {

				// 1- 카운트 다운을 시작하는 스레드
				new Thread(new Runnable() {
					// event 축약형 잡았을때 처럼 선언까지 해야 함!(객체 생성까지 해야함)
					public void run() {
						for (int i = 10; i > 0; i--) {
							if (inputChk) {
								lb.setText("빙고");
								inputChk = false;
								break; // 반복문만 벗어나겠다
								// return // run 메소드 자체를 벗어나겠다
							}
							lb.setText(String.valueOf(i));
							try {
								Thread.sleep(1000);
							} catch (InterruptedException e) {
							}
						}
					}
				}).start();
// 				Runnable 	
//				1. Thread 상속(Runnable 구현)
//    			-run() 오버라이딩
//    			2. start() 호출 -> run() 호출됨    위는 ----- > 한번에 다 호출

				// 2- 입력값을 받아서 JTextArea에 붙이는 작업
				new Thread(new Runnable() { // Runnable 을 구현한 이름없는 클래스
					public void run() {
						String input = JOptionPane.showInputDialog("값을 입력");
						ta.append(input);
						inputChk = true;

					}
				}).start();

			}
		});
	}

	public static void main(String[] args) {
		new Ex4_CounterTest();
	}
}



~~~

<hr style="height: 1px; background: skyblue"/>

#### ZBombTest

~~~

package thread.basic;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

public class Ex4_ZBombTest extends JFrame {
	private JPanel p1, p2;
	private JButton btn;
	private JLabel lb, image;
	private boolean inputChk;

	Ex4_ZBombTest() {
		setTitle("폭탄 테스트!");
		p1 = new JPanel();
		p1.add(btn = new JButton("시작"));
		p1.add(lb = new JLabel("카운트다운"));
		add(p1, "North");
		p2 = new JPanel();
		p2.add(image = new JLabel(new ImageIcon("src\\thread\\basic\\ex\\bomb_1.jpg")));

		add(p2, "Center");
		setBounds(200, 200, 600, 600);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setVisible(true);

		btn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				// 1- 카운트 다운을 시작하는 스레드
				new Thread(new Runnable() {
					public void run() {
						for (int i = 10; i > 0; i--) {
							if (inputChk) {
//								inputChk = false;
								lb.setText("빙고");
								return;
							}
							if (i == 1)
								image.setIcon(new ImageIcon("src\\thread\\basic\\imgs\\bomb_2.jpg"));
							lb.setText(String.valueOf(i));

							try {
								Thread.sleep(1000);
							} catch (InterruptedException e) {
							}
						}
					}
				}).start();

				// 2- 암호값을 입력받기
				new Thread(new Runnable() {
					public void run() {
						String secret = "1234";
						String answer = JOptionPane.showInputDialog("암호를 대시오");
						if (answer.equals(secret)) {
							inputChk = true;

						}

					}
				}).start();
			}
		});
	}

	public static void main(String[] args) {
		new Ex4_ZBombTest();
	}
}



~~~

<hr style="height: 1px; background: skyblue"/>

#### ThreadStop

~~~

package thread.basic;

public class Ex5_ThreadStop {

	public static void main(String[] args) {
		System.out.println("메인쓰레드:" + Thread.currentThread().getName());
		MakeCar3 mc = new MakeCar3();
		mc.start();
		try {
			Thread.sleep(2000);
		} catch (Exception e) {
		}
		System.out.println("쓰레드 종료");
		mc.flag = true;

//		mc.stop();
	}

}

class MakeCar3 extends Thread { // 동시에 작업 하는 것 처럼 보이게

	boolean flag = false;

	public void run() {
		for (int i = 0; i < 50; i++) {
			if(flag) return;
			System.out.println(getName() + "작업중");
			try {
				Thread.sleep(500);
			} catch (InterruptedException e) {
			}

		}

	}
}


~~~

<hr style="height: 1px; background: skyblue"/>

#### Priority

~~~

package thread.basic;

public class Ex6_Priority {

	public static void main(String[] args) {

		MakeCar mc1 = new MakeCar("차틀", Thread.NORM_PRIORITY); // 상수 처리
		mc1.start();

		MakeCar mc2 = new MakeCar("도색", Thread.NORM_PRIORITY);
		mc2.start();

	}// main

}// class

class MakeCar extends Thread {
	String work;

	MakeCar(String _work, int prio) {
		work = _work;
		setPriority(prio);
	}

	public void run() {
		for (int i = 0; i < 5; i++) {
			System.out.println(work + "작업중");

			try {
				Thread.sleep(500);
			} catch (InterruptedException e) {
			}

		}
	}
}


~~~

<hr style="height: 1px; background: skyblue"/>

#### Synch

~~~

package thread.basic;

class Count {
	int i; // 멤버 변수

	void increment() {
		synchronized (this) { // 공유하는 객체나 자기 자신이라도 괄호 안에 들어가야 함! lock을 걸겠다
			i++;
		}
	} // 메소드
}

class ThreadCount extends Thread {
	Count cnt;

	public ThreadCount(Count cnt) {
		this.cnt = cnt;

	}

	public void run() {
		for (int i = 0; i < 100000000; i++) {
			cnt.increment();
		}
	}
}

public class Ex7_Synch {

	public static void main(String[] args) {
		Count cnt = new Count();

		ThreadCount tc1 = new ThreadCount(cnt);
		tc1.start();

		ThreadCount tc2 = new ThreadCount(cnt);
		tc2.start(); // run 메소드 호출

		try {
			tc1.join();
			tc2.join();
		} catch (InterruptedException e) {
		}

		System.out.println("i값 = " + cnt.i);

	}

}



~~~

<hr style="height: 1px; background: skyblue"/>

#### BreadTest

~~~

package thread.basic;

class Bread {
	String bread;

	// ## : wait() / notifyAll()
	boolean isCheck = false;

	public void setBread(String bread) {

		this.bread = bread;
		// ##
		isCheck = true;
		synchronized (bread) {
			notifyAll(); // blocking 되어 있는것을 모두 불러준다.

		}
	}

	public String getBread() {
		// ##
		if (isCheck == false) {
			try {
				synchronized (bread) {
					wait();
				}
			} catch (InterruptedException e) {
			}
		}
		return bread;
	}
}

class Baker extends Thread {
	Bread bbang;

	Baker(Bread bbang) {
		this.bbang = bbang;
	}

	public void run() {
		bbang.setBread("진열된 완성된 맛있는 빵");
	}
}

class Customer extends Thread {
	Bread bbang;

	Customer(Bread bbang) {
		this.bbang = bbang;
	}

	public void run() {
		System.out.println("빵을 사감 : " + bbang.getBread());
	}
}

class Ex8_BreadTest {
	public static void main(String[] args) {
		Bread bread = new Bread();

		Baker baker = new Baker(bread);
		Customer customer = new Customer(bread);
		customer.start();
		baker.start();

		try {
			customer.join();
			baker.join();
		} catch (Exception ex) {
		}

	}
}



~~~

<hr style="height: 1px; background: skyblue"/>

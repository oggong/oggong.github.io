---
layout: post
title:  "2020-03-24-[Vue.js]-Vue.js intro"
subtitle:   "2020-03-24 Vue.js intro "
categories: devlog
tags: vue

---


## Vue.js 시작 <br/>


#### Do it Vue.js 입문을 보고 공부한 내용을 올리고 있습니다.



<br/>

<hr style="height: 1px; background: skyblue; "/>

<br/>


#### Vue.js

<br/>

- 웹 페이지를 개발하기 위한 프런트엔드 프레임워크

<p>
  기존 웹 개발자뿐만 아니라 HTML, CSS, 자바스크립트 기초만 알아도 접근하기 쉽다
</p>

<img style="float: left;" src="https://user-images.githubusercontent.com/49095304/77879506-8bd66a80-7295-11ea-956e-d8b6d74bb49c.jpg" width="500"/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>
> 점진적인 프레임워크로서의 뷰의 의미


<br/><br/>



- 뷰 코어 라이브러리는 화면단 데이터 표현에 관한 기능들을 중점적으로 지원
- 프레임워크의 기능인 라우터, 상태 관리, 테스팅 등을 쉽게 결합 할수 있는 형태로 제공
- 라이브러리 역할뿐만 아니라 프레임워크 역할도 할수 있다는 뜻

<br/>

- www.vuejs.org 에서도 점진적인 프레임워크라고 지칭


<br/>

<hr style="height: 1px; background: skyblue; "/>

<br/>


> 프런트엔드 프레임워크 시장은 리액트 앵귤러가 높은 점유율 차지 <br/>
리액트, 앵귤러 상대적 오래된 프레임워크, 많은 기업들이 사용

- 뷰는 2014년 2월에 공식 처음 배포
  - 다소 프레임워크 점유율 상대적으로 낮으나 성장세 가파름
  - 그만큼 지금 시기에 배워야 하는 프런트엔드 프레임워크 Vue!!
<br/>

- 현재 깃허브 리포지터리의 별 개수는 무수하고, 인기가 많은 프레임워크


<br/>

<hr style="height: 1px; background: skyblue; "/>

<br/>

#### Vue의 장점!!

- 1. 배우기 쉽다.
  - HTML,CSS,자바스크립트의 기초만 아는 입문자라도 배우기 쉽다.
<br/>
- 2. 리액트와 앵귤러에 비해 성능ㅇ이 우수하고 빠르다.
  - 리액트와 앵규러를 가지고 같은 테스트 케이스에서 성능 비교, 뷰가 빠름!
<br/>
- 3. 리액트의 장점과 앵귤러의 장점을 갖고 있다.
  - 앵귤러의 데이터 바인딩, 리액트의 가상 돔 기반 렌더링 특징을 가지고 있음
<br/>


<br/>

<hr style="height: 1px; background: skyblue; "/>

<br/>

#### Vue.js의 특징

- UI 화면단 라이브러리
  - 뷰(Vue.js)는 UI 화면 개발 방법 중 하나
  - MVVM 패턴의 뷰 모델 (ViewModel)에 해당하는 화면단 라이브러리

<img style="float: left;" src="https://user-images.githubusercontent.com/49095304/77880189-0489f680-7297-11ea-8ebe-0402e252963a.jpg" width="400"/> <br/><br/><br/><br/><br/><br/><br/>
>MVVM 구조에서의 Vue.js 위치

- 모델(Model) - 뷰(View) - 뷰 모델 (ViewModel)로 구조화 하여 개발하는 방식

  - 이유
  - 화면의 요소들을 제어하는 코드와 데이터 제어 로직을 분리하여 코드를 더 직관적으로 이해할 수 있고, <br/>
  추후 유지보수 편리


- View(뷰)
  - 사용자에게 보이는 화면
<br/>
- DOM(돔)
  - HTML 문서에 들어가는 요소(태그, 클래스, 속성 등)의 정보를 담고 있는 데이터 트리
<br/>
- DOM listner(돔리스너)
  - 돔의 변경 내역에 대해 즉각적으로 반응하여 특정 로직을 수행하는 장치
<br/>
- Model(모델)
  - 데이터를 담는 용기, 보통은 서버에서 가져온 데이터를 자바스크립트 객체 형태로 저장
<br/>
- Data Binding(데이터 바인딩)
  - 뷰(View)에 표시되는 내용과 모델의 데이터를 동기화
<br/>
- ViewModel(뷰 모델)
 - 뷰와 모델의 중간 영역, 돔 리스너와 데이터 바인딩을 제공하는 영역
<br/>

<br/>

<hr style="height: 1px; background: skyblue; "/>

<br/>


#### MVVM 구조의 처리 흐름

- 뷰는 사용자에게 비춰지는 화면 전체를 의미
- 검색창 등 HTML 문서상의 모든 요소
- 버튼을 클릭했을 때 돔 리스너에서 버튼의 클릭을 감지
- 그리고 버튼이 동작하면 검색 결과를 보여주는 로직이 처리
  - 이 처리 과정에서 데이터 바인딩이 관여, 검색 결과에 해당하는 데이터를 모델에서 가져와 <br/>
  화면에 나타내 줍니다.
<br/><br/>

- 이처럼 뷰는 화면의 요소가 변경되거나 조작이 일어날 때 즉각적으로 반응하여 화면의 데이터를 갱신하여<br/> 보여주는 역할을 한다.
- 화면의 표현에 주로 관여하는 라이브러리이기 때문에 화면단 라이브러리라고도 함

<br/>

<hr style="height: 1px; background: skyblue; "/>

<br/>


#### 컴포넌트 기반 프레임워크

- 뷰가 가지는 또 하나의 큰 특징은 바로 컴포넌트 기반 프레임워크라는 점

#### 리액트와 앵귤러의 장점을 가진 프레임 워크

- 뷰는 앵귤러의 양방향 데이터 바인딩 (Two-way Data Binding) 과 리액트의 단방향 데이터 흐름의 장점을 결합

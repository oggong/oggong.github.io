---
layout: post
title:  "1024-[React]-9.React hooks(1)"
subtitle:   "1024-9.React hooks(1)"
categories: devlog
tags: react
---

## React hooks (1)

<hr style="height: 1px; background: skyblue; "/>

> - Hooks는 리액트 v16.8 에 새로 도입된 기능으로 함수형 컴포넌트에서도 상태관리를
>    useState, 렌더링 직후 작업을 설정하는 useEffect 등의 기능을 제공

~~~

yarn create react-app hooks-tutorial

~~~

<hr style="height: 1px; background: skyblue; "/>

#### useState

- useState는 가장 기본적인 Hook
- 함수형 컴포넌트에서도 가변적인 상태를 지닐수 있게 해준다.


- App.js

~~~

import React from 'react';
import Counter from './Counter';

const App = () => {
  return (
    <Counter />
  );
}

export default App;


~~~

- Counter.js

~~~

import React, { useState } from 'react';

const Counter = () => {
    const [value, setValue] = useState(0);


    return (
        <div>
            <p>
                현재 카운터 값은 <b>{value}</b>입니다.
            </p>
            <button onClick={() => setValue(value + 1)}>+1</button>
            <button onClick={() => setValue(value - 1)}>-1</button>
        </div>
    );
};

export default Counter;

~~~

> - const [value, setValue] = useState(0);
> - useState 함수의 파라미터에는 상태의 기본값을 넣는다.
>   - 현재는 0을 넣어줌
> - 이 함수가 호출되면 배열을 반환.
> - 그 배열의 첫 번째 원소는 상태 값, 두 번째 원소는 상태를 설정하는 함수
> - 이 함수에 넣어서 호출 하면 전달받은 파라미터로 값이 바뀌고 컴포넌트가 정상적 리렌더링

<hr style="height: 1px; background: skyblue; "/>

#### useState를 여러 번 사용하기

- App.js

~~~

import React from 'react';
import Info from './Info';

const App = () => {
  return (
    <Info/>
  );
}

export default App;


~~~

- Info.js

~~~

import React, { useState } from 'react';

const Info = () => {
    const [name, setName] = useState('');
    const [nickname, setNickname] = useState('');

    const onChange = e => {
        setName(e.target.value);
    };

    const onChangeNickname = e => {
        setNickname(e.target.value);
    };

    return (
        <div>
            <div>
                <input value={name} onChange={onChange} />
                <input value={nickname} onChange={onChangeNickname} />
            </div>
            <div>
                <div>
                    <b>이름:</b> {name}
                </div>
                <div>
                    <b>닉네임:</b> {nickname}
                </div>
            </div>
        </div>
    );
};

export default Info;
~~~

<hr style="height: 1px; background: skyblue; "/>

#### useEffect

- useEffect는 리액트 컴포넌트가 렌더링될 때마다 특정 작업을 수행하도록 설정할 수 있다.
- 클래스형 컴포넌트의 componentDidMount와 componentDidUpdate를 합친 형태로 볼수 있다.

- Info.js

~~~

import React, { useState, useEffect } from 'react';

const Info = () => {
    const [name, setName] = useState('');
    const [nickname, setNickname] = useState('');

    useEffect(() => {
        console.log('렌더링 완료되었습니다');
        console.log({
            name,
            nickname
        });
    });

    const onChange = e => {
        setName(e.target.value);
    };

    const onChangeNickname = e => {
        setNickname(e.target.value);
    };

    return (
        <div>
            <div>
                <input value={name} onChange={onChange} />
                <input value={nickname} onChange={onChangeNickname} />
            </div>
            <div>
                <div>
                    <b>이름:</b> {name}
                </div>
                <div>
                    <b>닉네임:</b> {nickname}
                </div>
            </div>
        </div>
    );
};

export default Info;

~~~


#### 마운트 될때만 실행하고 싶을때

~~~

   useEffect(() => {
        console.log('마운트될 때만 실행됩니다,');
    },[]);

~~~

- useEffect에서 설정한 함수를 컴포넌트가 화면에 맨 처음 렌더링될 때만 실행하고,<br/>
    업데이트될때는 실행하지 않으려면 함수의 두 번째 파라미터로 비어 있는 배열 생성

#### 특정 값이 업데이트될 때만 실행하고 싶을 때

- useEffect를 사용할 때, 특정 값이 변경 될때만 호출하고 싶을때,


~~~

useEffect(() => {
        console.log(name);
    },[name]);

~~~

- useEffect의 두 번째 파라미터로 전달되는 배열안에 검사하고 싶은 값을 넣어주면 된다.
- 배열 안에는 useState를 통해 관리하고 있는 상태를 넣어 주어도 되고, propr로 전달받은
<br/> props로 전달받은 값을 넣어주어도 된다.


#### 뒷정리하기

- useEffect는 기본적으로 렌더링 되고 난 직후마다 실행되며,<br/>
- 두 번째 파라미터 배열에 무엇을 넣었는지에 따라 실행되는 조건이 달라짐

- 컴포넌트가 언마운트 되기 전이나 업데이트 되기 직전에 어떠한 작업을 <br/>
    수행하고 싶다면 useEffect에서 뒷정리(cleanup)함수를 반환해 주어야 한다.

- Info.js

~~~

 useEffect(() => {
        console.log('effect');
        console.log(name);
        return () => {
            console.log('cleanup');
            console.log(name);
        }
    });

~~~

- App.js

~~~

import React, { useState } from 'react';
import Info from './Info';

const App = () => {
  const [visible, setVisible] = useState(false);
  return (
    <div>
      <button
        onClick={() => {
          setVisible(!visible);
        }}
      >{visible ? '숨기기' : '보이기'}</button>
      <hr />
      {visible && <Info />}
    </div>
  );
}

export default App;


~~~

- 컴포넌트가 나타날 때 콘솔에 effect가 나타나고, 사라질때 cleanup이 나타난다.

오직 언마운트될 때만 뒷정리 함수를 호출 하고 싶다면 useEffect 함수의 두 번째 <br/>
파라미터에 비어있는 배열을 넣으면 됩니다.

- Info.js

~~~

  useEffect(() => {
        console.log('effect');
        console.log(name);
        return () => {
            console.log('cleanup');
            console.log(name);
        };
    }, []);

~~~


<hr style="height: 1px; background: skyblue; "/>

> 리액트를 다루는 기술 책을 보고 공부한 것을 정리하여 올린 글입니다.<br/>
> 출처: 길벗 리액트를 다루는 기술 <br/>







---
layout: post
title:  "1015-1-[React]-intro"
subtitle:   "1015-intro"
categories: devlog
tags: react
---

## React intro

<hr style="height: 1px; background: skyblue; "/>

<img style="float: left;" src="https://user-images.githubusercontent.com/49095304/72657852-1fb1cd80-39ed-11ea-8854-8bd43f6dac68.png" width="100">
<br/><br/><br/><br/><br/>


#### Javascript가 인기가 많은 이유

> 자바스크립트는 웹 브라우저에서 간단한 연산을 하거나 시각적인 효과를 주는 단순한 스크립트 언어였다.

- 현재는 웹 애플리케이션에서 가장 핵심적인 역할!

<hr style="height: 1px; background: skyblue; "/>

#### Javascript를 통하여 만들어진 대표적 프로그램

- Electron = Slack, Atom, VS Code (데스크톱 애플리케이션) <br/>
- Ionic, Titanium, NativeScript, React Native <br/>
    -> Facebook, Discord, Paypal, Ebay 
    - 크로스 플랫폼 애플리케이션 개발

#### 자바스크립트만으로 규모가 큰 애플리케이션 만들수 있다!!

- 그 중 Front-end side에서 돌아가는 애플리케이션 구조를 관리 하려면 순수하게 JavaScript로 만 관리 하기 어려움

### 프레임 워크로 관리!

> Angular, Backbone.js, Derby.js, Ember.js, Ext.js,  Knockback.js, Sammy.js, PureMVC, Vue.js 등 을 이용

- 주로 MVC(Model-View-Controller) 아키텍처, MVVM(Model-View-View model) 사용

<img style="float: left;" src="https://user-images.githubusercontent.com/49095304/72658140-1d04a780-39f0-11ea-8be3-7a39f3a0fcce.JPG" width="600">
<br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>

- MVC, MVVM, MVW 등의 같은 여러구조가 지닌 공통점은 모델(Model)과 뷰(View)가 있다는 것<br/>
- 모델은 애플리케이션을 사용하는 데이터를 관리하는 영역
- 뷰는 사용자에게 보이는 부분
- 프로그램이 사용자에게서 어떤 작업(예: 버튼 클릭, 텍스트 입력 등)을 받으면 컨트롤러는 모델 데이터를 조회하거나 수정,
변경된 사항을 뷰에 반영 


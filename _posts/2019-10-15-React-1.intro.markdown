---
layout: post
title:  "1015-1-[React]-intro"
subtitle:   "1015-intro"
categories: devlog
tags: react
---

## React intro


<hr style="height: 1px; background: skyblue; "/>


<img style="float: left;" src="https://user-images.githubusercontent.com/49095304/72657852-1fb1cd80-39ed-11ea-8854-8bd43f6dac68.png" width="100">
<br/><br/><br/><br/><br/>



#### Javascript가 인기가 많은 이유

> 자바스크립트는 웹 브라우저에서 간단한 연산을 하거나 <br/> 
시각적인 효과를 주는 단순한 스크립트 언어였다.

- 현재는 웹 애플리케이션에서 가장 핵심적인 역할!


<hr style="height: 1px; background: skyblue; "/>


#### Javascript를 통하여 만들어진 대표적 프로그램

- Electron = Slack, Atom, VS Code (데스크톱 애플리케이션) <br/>
- Ionic, Titanium, NativeScript, React Native <br/>
    -> Facebook, Discord, Paypal, Ebay 
    - 크로스 플랫폼 애플리케이션 개발

#### 자바스크립트만으로 규모가 큰 애플리케이션 만들수 있다!!

- 그 중 Front-end side에서 돌아가는 애플리케이션 구조를 관리 하려면 순수하게 JavaScript로 만 관리 하기 어려움

### 프레임 워크로 관리!

> Angular, Backbone.js, Derby.js, Ember.js, Ext.js,  Knockback.js, Sammy.js, PureMVC, Vue.js 등 을 이용

- 주로 MVC(Model-View-Controller) 아키텍처, MVVM(Model-View-View model) 사용

<img style="float: left;" src="https://user-images.githubusercontent.com/49095304/72658140-1d04a780-39f0-11ea-8be3-7a39f3a0fcce.JPG" width="600">
<br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>

- MVC, MVVM, MVW 등의 같은 여러구조가 지닌 공통점은 모델(Model)과 뷰(View)가 있다는 것<br/>

#### Model
- 애플리케이션을 사용하는 데이터를 관리하는 영역

#### View
- 사용자에게 보이는 부분

#### Controller
- 프로그램이 사용자에게서 어떤 작업(예: 버튼 클릭, 텍스트 입력 등)을 받으면 컨트롤러는 모델 데이터를 조회하거나 수정,
변경된 사항을 뷰에 반영 

- 애플리케이션 규모가 크면 상당히 복잡해지고 제대로 관리하지 않으면 성능도 떨어질 가능성이 높음!


<hr style="height: 1px; background: skyblue; "/>


### React

- 페이스북 개발 팀은 새로운 아이디어 고안!!
- 데이터 변할때마다 변화를 줄지 고민하는 것 보다 그냥 기존 뷰를 날려 버리고 처음 부터 새로 렌더링 하는 방식!
    - 어떻게 변화를 줄지 고민하지 않고, 그저 뷰가 어떻게 생길지 선언
    - 데이터에 변화가 있으면 기존에 있던 것은 버리고 정해진 규칙에 따라 새로 렌더링!

- 웹 브라우저에서 이 방식대로 하면 CPU 점유율도 크게 증가
    - DOM은 느리기 때문
    - 메모리도 많이 사용
    - 새로 랜더링하면 끊김 현상 발생


#### 최대한 성능을 아끼고 편안한 사용자 경험을 제공 하면서 구현 하고자 개발한 것이 바로 리액트!!


- 리액트는 자바스크립트 라이브러리로 사용자 인터페이스를 만드는데 사용
- 오직 View 만 신경 쓰는 라이브러리

#### Component

- 컴포넌트는 재사용이 가능한 API로 수많은 기능등을 내장하고 있으며, <br/>컴포넌트 하나에서 해당 컴포넌트의 생김새와 작동 방식을 정의 

#### Rendering
사용자 화면에 뷰를 보여 주는 것을 렌더링

리액트 라이브러리는 뷰를 어떻게 렌더링하길래 데이터가 변할 때마다 새롭게 리렌더링하면서 성능을 아끼고, 최적의 사용자 경험을 제공?

- 비밀은 초기 렌더링과 리렌더링에 있다!!


<hr style="height: 1px; background: skyblue; "/>


1. 초기 렌더링 

- 어떤 UI 관련 프레임워크, 라이브러리를 사용하든지 간에 <br/>
맨 처음 어떻게 보일지를 정하는 초기 렌더링 필요!

#### render 함수

~~~

render(){...}

~~~

- 컴포넌트가 어떻게 생겼는지 정의하는 역할
- html 형식의 문자열을 반환하지 않고, 뷰가 어떻게 생겼고 <br/> 어떻게 작동하는지에 대한 정보를 지닌 객체를 반환
- 컴포넌트 내부에는 또 다른 컴포넌트 들어갈 수 있다.
- 이때 render 함수를 실행하면 그 내부에서 있는 컴포넌트들도 <br/>
재귀적으로 렌더링
- 이렇게 최상위 컴포넌트의 렌더링 작업 후 지니고 있는 정보들을 <br/>
사용하여 HTML 마크업을 만들고, 우리가 정하는 실제 페이지의 <br/>
DOM 요소 안에 주입

<img style="float: left;" src="https://user-images.githubusercontent.com/49095304/72658584-4fb19e80-39f6-11ea-88cc-215fc30148fd.JPG" width="600">
<br/><br/><br/><br/><br/><br/><br/><br/>

1. 문자열 형태의 HTML 코드를 생성
2. 특정 DOM에 해당 내용을 주입

###### 이벤트 적용


<hr style="height: 1px; background: skyblue; "/>


#### 조화 과정

> - 업데이트 한다 보다 --> 조화 과정을 거친다(reconciliaation)
> - 컴포넌트에서 데이터에 변화가 있을 때 우리가 보기에는 <br/>
> 변화에 따라 뷰가 변형되는 것처럼 보이지만
> - #### 새로운 요소로 갈아끼우는 것!

- 이 작업 또한 render 함수로 작업
- 컴포넌트는 데이터를 업데이트했을 때 단순히 업데이트한 값을 <br/>
정하는 것이 아니라, 새로운 데이터를 가지고 render함수를 또 다시 호출
- 그러면 데이터를 지닌 뷰를 생성
- 하지만 이때 render함수가 반환하는 결과를 곧바로 DOM에 반영 X
- 이전에 render함수가 만들었던 컴포넌트 정보와 <br/>
render 함수가 만든 컴포넌트 정보를 비교

1. 자바스크립트를 사용하여 두 가지 뷰를 최소한의 연산으로 비교
2. 둘의 차이를 알아내 최소한의 연산으로 DOM 트리를 업데이트

- 결국 방식 자체는 루트 노드부터 시작하여 <br/> 
전체 컴포넌트를 처음부터 다시 렌더링 하는 것처럼 보이지만,<br/> 
사실 최적의 자원을 사용하여 수행 하는 것

<img style="float: left;" src="https://user-images.githubusercontent.com/49095304/72658729-9d2f0b00-39f8-11ea-878f-9e31e3c16d90.JPG" width="600">
<br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>
<br/>


<hr style="height: 1px; background: skyblue; "/>

이 글은 리액트를 다루는 기술을 보면서 공부하고 글을 작성하였습니다.





---
layout: post
title:  "1015-1-[React]-1.React란"
subtitle:   "1015-1.React 소개"
categories: devlog
tags: react

---
## React 소개
---

<img style="float: left;" src="https://user-images.githubusercontent.com/49095304/69623441-40614500-1086-11ea-849f-197d95e53061.jpg" width="300"><br/><br/><br/><br/>

* 최근 몇년간 전 세계 개발자는 자바스크립트에 뜨겁게 열광하고 있다.
* 과거에 자바스크립트는 웹 브라우저에서 간단한 연산을 하거나 시각적인 효과를 주는 단순한 스크립트 언어에 불과 했지만, 지금은 웹 어플리케이션에서 핵심 역할을 하고 있다.
* 더 나아가 영역을 확장하고 있으며 서버사이드 및 모바일, 데스크톱 애플리케이션까지 활용 되고 있다.
<br/>

---

<img style="float: left;" src="https://user-images.githubusercontent.com/49095304/69623869-f62c9380-1086-11ea-8c40-c687ded450d9.png" width="300"><br/><br/><br/><br/>

<br/>
리액트는 자바스크립트 라이브러리 사용자 인터페이스를 만드는 데 사용 <br/>
오직 View 만 신경 쓰는 라이브러리 <br/>
<br/>

#### Component
<br/>
<p>
재사용이 가능한 API로 수많은 기능들을 내장하고 있으며, 컴포넌트 하나에서 해당 컴포넌트의 생김새와 작동 방식을 정의 <br/></p>

---

##### 렌더링
* 사용자 화면에 뷰를 보여주는것

#### 리액트 작동 구조
<br/>
##### 초기 렌더링
* 맨 처음 어떻게 보일지를 정하는 것
<br/>


~~~

render() {.....}

~~~


<p>
이 함수는 컴포넌트가 어떻게 생겼는지 정의하는 역할. 이 함수는 html 형식의 문자열을 반환하지 않고, <br/>
뷰가 어떻게 생겼고 어떻게 작동하는지에 대한 정보를 지닌 객체를 반환
컴포넌트 내부에는 또 다른 컴포넌트들이 들어갈 수 있다.<br/>
이때 render 함수를 실행 하면 그 내부에 있는 컴포넌트들도 재귀적으로 렌더링 한다.<br/>
이렇게 최상위 컴포넌트의 렌더링 작업이 끝나면 지니고 있는 정보들을 사용하여 HTML 마크업(markup)을 만들고,<br/>
이를 우리가 정하는 실제 페이지의 DOM 요소 안에 주입.
</p>

<img style="float: left;" src="https://user-images.githubusercontent.com/49095304/69625606-45c08e80-108a-11ea-88b9-05c7b03a2e11.jpg" width="300"><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>
<br/><br/><br/><br/>
* 컴포넌트를 실제 페이지에 렌더링 할때 분리된 두가지 절차
 1. 먼저 문자열 형태의 HTML 코드를 생성
 2. 특정 DOM에 해당 내용을 주입하면 이벤트 적용

<br/>
##### 리렌더링
* 초기 렌더링 과 컴포넌트의 데이터 변경으로 다시 실행 되는 것
우선 리액트에서 뷰를 업데이트할 때는 "업데이트 과정을 거친다" 라고 하기보다는 "조화과정(reconciliation)" 이라고 해야한다.<br/>
* 컴포넌트에서 데이터 변화가 있을때 우리가 보기에는 변화에 따라 뷰가 변형 되는 것처럼 보이지만 , 사실은 새로운 요소로 갈아 끼우기 때문입니다.
<br/>

컴포넌트는 데이터를 업데이트했을 때 단순히 업데이트한 값을 수정하는 것이 아니라, 새로운 데이터를 가지고 render 함수를 도 다시 호출 <br/>
하지만 이때 render 함수가 반환하는 결과를 곧바로 DOM에 반영하지 않고, 이전에 render 함수가 만들었던 컴포넌트 정보와 현재 render 함수가 만든 컴포넌트 정보를 비교합니다.<br/><br/>

<img style="float: left;" src="https://user-images.githubusercontent.com/49095304/69624559-422c0800-1088-11ea-80ef-68a7b7b9ebb3.png" width="550">
<br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>
자바스크립트를 사용하여 두가지 뷰를 최소한의 연산으로 비교, 둘의 차이를 알아내 최소한의 연산으로 DOM을업데이트
<br/>

##### Result
<br/>
방식 자체는 루트 노드부터 시작하여 전체 컴포넌트를 처음부터 다시 렌더링 하는 것처럼 보이지만. 사실 최적의 자원을 사용하여 이를 수행 하는 것

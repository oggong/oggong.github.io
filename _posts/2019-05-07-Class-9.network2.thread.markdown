---
layout: post
title:  "0507-[자바]-Class-9.network2.thread"
subtitle:   "0507-network2.thread"
categories: devlog
tags: Java

---
## network2.thread

<hr style="height: 1px; background: skyblue; "/>

#### Client

~~~

package network2.thread;

import java.io.*;
import java.net.*;

public class Client {

	public final static int PORT = 3333;
	public final static String HOST = "192.168.0.0";
	static int a[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
	static int b[] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };

	public static void main(String args[]) {
		Socket cl = null;
		DataInputStream br = null;
		DataOutputStream dos = null;

		int result[] = new int[10];

		/***********************************************
		 * 소켓 객체, 입력스트림과 출력 스트림 객체 생성
		 */
		try {

			// 1. 소켓 객체 생성
			cl = new Socket(HOST, PORT);
			// 2. 입력 스트림 생성
			br = new DataInputStream(cl.getInputStream());
			// 3. 출력 스트림 생성
			dos = new DataOutputStream(cl.getOutputStream());

		} catch (Exception ex) {
			System.out.println("Error is " + ex);
		}

		/***********************************************
		 * 숫자 배열을 서버에 전송
		 */
		try {
			for (int i = 0; i < a.length; i++) {
				// 1. a 배열을 서버에 전송
				dos.writeInt(a[i]);
			}
			for (int i = 0; i < b.length; i++) {
				// 2. b 배열을 서버에 전송
				dos.writeInt(b[i]);
			}
		} catch (Exception ex) {
			System.out.println("error writing to server.." + ex);
		}

		/***********************************************
		 * 서버로부터 결과를 읽어 옴
		 */
		try {
			for (int i = 0; i < result.length; i++) {
				// 1. 서버에서 읽어와서 result 배열에 저장
				result[i] = br.readInt();
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}

		/***********************************************
		 * 결과를 화면에 출력
		 */
		System.out.println("The sum of the two arrays : ");
		for (int i = 0; i < result.length; i++)
			System.out.println(result[i] + " ");

		/***********************************************
		 * 출력 스트림, 입력 스트림, 소켓 객체 닫기
		 */
		try {

			// 1. 출력 스트림 닫기
			dos.close();
			// 2. 입력 스트림 닫기
			br.close();
			// 3. 소켓 닫기
			cl.close();

		} catch (Exception ex) {
			System.out.println("Error close.... " + ex);
		}
	}
}

~~~

<hr style="height: 1px; background: skyblue"/>

#### Server

~~~

package network2.thread;

import java.io.*;
import java.net.*;

public  class Server extends Thread {

	public static final int PORT = 3333;
	protected ServerSocket listen;

	public Server() {
		try{
			listen = new ServerSocket( PORT );
		} catch( IOException ex ) {
			System.out.println("Creating the ServerSocket.." + ex );
		}
		this.start();		
	}

	// 요청이 들어올 때마다 연결 상태를 새로이 생성
	public void run() {
		try{
			while( true){
					Socket client = listen.accept();
					JuryThread cc = new JuryThread( client );
					System.out.println("클라이언트 입장 : " + client );
			}
		} catch( IOException ex ) {
			System.out.println("Creating the Socket.." +  ex );
		}
	}

	public static void main( String args[] )  {
		new Server();
	}
}

class JuryThread extends Thread{
	Socket client;
	DataInputStream in;
	DataOutputStream out;

	public JuryThread( Socket s ) {
		client	= s;
		try {
			in = new DataInputStream( client.getInputStream());
			out = new DataOutputStream( client.getOutputStream());
		} catch ( IOException ex ) {
			try{
					client.close();
			} catch ( IOException exc ) {
					System.out.println("Error getting socket stream : " + exc );
			}
			return;
		}

		this.start(); // run 메소드 호출
	}

	public void run() {

		/*******************************************
		* 클라이언트로부터 데이타를 읽어옴
		*/
		int a[] = new int [10];
		int b[] = new int [10];
		try{
			for( int i =0 ; i< a.length ; i++ )
				a[i] = in.readInt();
			for( int i =0 ; i< b.length ; i++ )
				b[i] = in.readInt();			 	
		} catch ( Exception ex ){
			ex.printStackTrace();
		}

		/*******************************************
		* 읽어 온 데이타를 계산
		*/
		int result[] = new int [10];
		for( int i=0 ; i<result.length ; i++ )
			result[i] = a[i] + b[i];

		/*******************************************
		* 계산 결과를 다시 클라이언트로 보냄
		*/
		try{
			for( int i=0 ; i<result.length ; i++ )
				out.writeInt( result[i] );
		} catch( Exception ex ) {
			ex.printStackTrace();
		}

		/*******************************************
		* 닫기
		*/
		try{
			in.close();
			out.close();
			client.close();
		}catch( Exception ex ){

		}
	}
}

~~~

<hr style="height: 1px; background: skyblue"/>

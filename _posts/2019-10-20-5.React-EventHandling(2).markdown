---
layout: post
title:  "1020-[React]-5.React EventHandling (2)"
subtitle:   "1020-5.React EventHandling"
categories: devlog
tags: react
---

## React EventHandling (2)

<hr style="height: 1px; background: skyblue; "/>

#### 함수형 컴포넌트로 구현

~~~

import React, { useState } from 'react';

const EventPractice = () => {

    const [username, setUsername] = useState('');
    const [message, setMessage] = useState('');
    const onChangeUsername = e => setUsername(e.target.value);
    const onChangeMessage = e => setMessage(e.target.value);




    const onClick = () => {
        alert(username + " : " + message);
        setUsername('');
        setMessage('');
    }

    const onKeyPress = e => {
        if (e.key === 'Enter') {
            onClick();
        }
    }


    return (
        <div>
            <h1>이벤트연습</h1>
            <input
                type="text"
                name="username"
                placeholder="사용자"
                value={username}
                onChange={onChangeUsername}
            />
            <input
                type="text"
                name="message"
                placeholder="아무거나 입력하시오"
                value={message}
                onChange={onChangeMessage}
                onKeyPress={onKeyPress}
            />
            <button onClick={onClick}>확인</button>
        </div>
    );
}

export default EventPractice;

~~~


- e.target.name 활용 X
- onChange 관련 함수 두개 따로 생성

- 인풋이 두개 일때는 괜찮다
- 그러나 인풋의 개수가 많아지면 e.target.name을 활용하는것이 좋을수도 있다.

<hr style="height: 1px; background: skyblue; "/>

- useState를 통해 사용하는 문자열이 아닌 객체 이용


EventPractice.js

~~~

import React, { useState } from 'react';

const EventPractice = () => {

    const [form, setForm] = useState({
        username:'',
        message:''
    });

    const {username,message} = form;

    const onChange = e => {
        const nextForm = {
            ...form, // 기존의 form 내용을 이 자리에 복사한 뒤
            [e.target.name]: e.target.value // 원하는 값을 덮어 씌우기

        };
        setForm(nextForm);
    };

    const onClick = () => {
        alert(username + " : " + message);
        setForm({
            username: '',
            message: ''
        });
    };

    const onKeyPress = e => {
        if (e.key === 'Enter') {
            onClick();
        }
    }


    return (
        <div>
            <h1>이벤트연습</h1>
            <input
                type="text"
                name="username"
                placeholder="사용자"
                value={username}
                onChange={onChange}
            />
            <input
                type="text"
                name="message"
                placeholder="아무거나 입력하시오"
                value={message}
                onChange={onChange}
                onKeyPress={onKeyPress}
            />
            <button onClick={onClick}>확인</button>
        </div>
    );
}

export default EventPractice;


~~~

- e.target.name 값을 활용하려면 위와 같이 useState를 쓸 때 <br/>
    인풋 값들이 들어 있는 form 객체 사용

<hr style="height: 1px; background: skyblue; "/>

> 리액트를 다루는 기술 책을 보고 공부한 것을 정리하여 올린 글입니다.<br/>
> 출처: 길벗 리액트를 다루는 기술 <br/>






